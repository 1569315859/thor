所以我们不能让这种情况发生
如果在主节点用的是这种方式
它就会观察到
如果我们允许网卡直接将接收到的包DMA到主节点内存
我们没办法精确控制网卡将数据复制到内存的时间点
所以我们也不知道 什么时候主节点观察到网络包中的数据
这就意味着网卡复制包进虚拟机监视器的虚拟内存
然后打断虚拟机监视器告诉它有抵达的包
这时虚拟机监视器就会中断主节点
记住当前位置的指令号
在主节点中断的时候 复制整个包到主节点的内存
然后模拟主节点的网卡中断
然后发送包和中断位置的指令号到副节点
副节点也会中断
副节点也会在同样的指令号位置中断
复制整个包到副节点的内存 同样副节点中断没有注意包的抵达过程
然后模拟副节点在同样指令号位置中断
这就是论文中描述的回弹缓冲机制
会产生记录通道流量的指令都是不寻常的指令 很少见
一般是在主节点和副节点执行结果会不同的指令
例如获取当前时间 获取当前处理器数量
或者获取已执行的指令数量
这些相对来说都是很少见的
或者说像生成随机数
让硬件生成用于加密的随机数之类的
这些都不是日常的指令
大多数指令例如相加的指令会在主副节点有相同的结果
没错 每个网络包都被直接打包转发没有修改
由两边的TCP/IP栈进行解析
所以我认为99.99%的记录通道流量都是来自于接收到的包
只有少部分是因为会产生不确定结果的指令造成
所以我们可以猜到在有客户端连接的服务器上 流量大概是什么样子的
基本就是各个客户端发的包
所以我们就能估算出记录通道需要有怎样的性能
输出是如何工作的也值得讲一下
在这个系统中 输出就是指发送数据包
客户端发送请求的网络包 服务端响应网络包
没有其他形式的输出了
主节点和副节点计算他们要发送的数据包
在主节点上真正进行发送
副节点的包则被简单地丢弃掉
真实的情况会稍微复杂一点
假设我们在跑的是一个简单的数据库服务器
服务器支持客户端进行计数器自增（Increment)操作
客户端发送自增的请求 服务端对计数器进行加操作 返回操作后的值
假设在主节点一切都正常
主副节点现在都存有计数器值10在内存中
本地网络的客户端发送自增请求到主节点
这个网络包被发到主节点
然后被主节点的程序执行
比如说现在是10 我要将他变为11
然后产生回复告诉客户端结果11
这个请求也会被发送到副本上 将10改为11
然后同样产生一个回复 并被丢弃掉 理论上是这样
然而你也要想一下如果在不恰当的时间服务出现失败会怎么样
上这门课的期间你要一直这样问自己
何时出现失败是最坏的情况 这种情况下会发生什么
假设主节点确实生成了返回给客户端的回复
但是主节点在发送完回复之后就宕机了
更糟的是 网络向来不保证数据包能传递到接收方
再假设记录通道也在主节点宕机的时候失效了
那么现在的状态就是 客户端收到回复11
但是副节点没有收到转发来的客户端请求 所以计数器仍然是10
现在因为察觉到主节点宕机 副节点接管服务
那这个或者其他客户端发送自增请求到原来的副节点
当收到请求的时候这个接管工作的副节点开始处理
将计数器从10自增为11
然后值11就会第二次作为回复出现
回复给原来的客户端或者不同的客户端
客户端如果比较会发现这是同样的回复 这本不应该发生
因为我们需要支撑的程序在没改动的情况下
并不能处理这些副节点上不寻常的问题
意思是我们不能对它进行修改
比如说我们可以
把客户端改成能处理
副节点容错性带来的问题
但是实际上我们没有这种选择
因为这个系统只有在我们不需要客户端进行改动的情况下才有意义
所以这是个灾难
我们不能让它发生
有人记得论文上是怎么样防止它发生的吗？
输出规则 对的
没错解决的方案就是控制输出规则
方案就是阻止输出
在主节点上不允许生成任何输出
比如我们现在说的这个计数器输出
直到副节点确认收到了所有的记录
所以整个流程正确的顺序是 回到主节点宕机之前
回到计数器还是10的时候
正确的顺序是 在这个输出规则下
当输入到来时
虚拟机监视器发送输入的副本到副节点
这个输入的日志信息
在主节点产生输出前发到副节点
发送之后这个日志就在去往副节点的网络中
这个日志有可能丢失
虚拟机监视器同样传递请求到主节点 生成输出
所以现在主节点生成结果 计数器值变为11
然后产生一个11的回复
但是虚拟机监视器说等一下 现在还不允许生成输出
直到之前的日志记录都被副节点确认
这是最近的一条日志消息
所以输出都被虚拟机监视器截停
直到这条包含客户端输入的日志
被虚拟机监视器投递和缓冲
但是不一定马上会执行
可能需要等待副节点执行到指令流中对应的位置
到这里虚拟机监视器就会发送一个ACK包说自己收到输入
直到主节点接收到ACK包时