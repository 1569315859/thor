1
00:00:00,600 --> 00:00:05,640
I'd like to get started today we're

2
00:00:05,640 --> 00:00:09,389
gonna talk about GFS the Google file

3
00:00:09,389 --> 00:00:10,980
system paper we read for today

4
00:00:10,980 --> 00:00:12,660
and this will be the first of a number

5
00:00:12,660 --> 00:00:15,540
of different sort of case studies we'll

6
00:00:15,540 --> 00:00:17,160
talk about in this course about how to

7
00:00:17,160 --> 00:00:19,410
be build big storage systems so the

8
00:00:19,410 --> 00:00:29,310
larger topic is big storage the reason

9
00:00:29,310 --> 00:00:31,410
is the storage is turned out to be a key

10
00:00:31,410 --> 00:00:34,260
abstraction you might you know if you

11
00:00:34,260 --> 00:00:35,850
didn't know already you might imagine

12
00:00:35,850 --> 00:00:37,230
that there could be all kinds of

13
00:00:37,230 --> 00:00:40,050
different you know important

14
00:00:40,050 --> 00:00:42,030
abstractions you might want to use for

15
00:00:42,030 --> 00:00:43,650
distributed systems but it's turned out

16
00:00:43,650 --> 00:00:47,730
that a simple storage interface is just

17
00:00:47,730 --> 00:00:50,010
incredibly useful and extremely general

18
00:00:50,010 --> 00:00:51,480
and so a lot of the thought that's gone

19
00:00:51,480 --> 00:00:53,280
into building distributed systems has

20
00:00:53,280 --> 00:00:55,170
either gone into designing storage

21
00:00:55,170 --> 00:00:57,630
systems or designing other systems that

22
00:00:57,630 --> 00:01:00,180
assume underneath them some sort of

23
00:01:00,180 --> 00:01:02,989
reasonably well behaved big just

24
00:01:02,989 --> 00:01:05,519
distributed storage system so we're

25
00:01:05,519 --> 00:01:07,500
going to care a lot about how the you

26
00:01:07,500 --> 00:01:09,360
know how to design a good interface to a

27
00:01:09,360 --> 00:01:12,420
big storage system and how to design the

28
00:01:12,420 --> 00:01:14,159
innards of the storage system so it has

29
00:01:14,159 --> 00:01:18,030
good behavior you know of course that's

30
00:01:18,030 --> 00:01:19,229
why we're reading this paper just to get

31
00:01:19,229 --> 00:01:20,850
a start on that the this paper also

32
00:01:20,850 --> 00:01:22,530
touches on a lot of themes that will

33
00:01:22,530 --> 00:01:24,900
come up a lot in a tube for parallel

34
00:01:24,900 --> 00:01:27,060
performance fault tolerance replication

35
00:01:27,060 --> 00:01:31,740
and consistency and this paper is as

36
00:01:31,740 --> 00:01:34,140
such things go reasonably

37
00:01:34,140 --> 00:01:36,390
straightforward and easy to understand

38
00:01:36,390 --> 00:01:38,670
it's also a good systems paper it sort

39
00:01:38,670 --> 00:01:40,560
of talks about issues all the way from

40
00:01:40,560 --> 00:01:43,229
the hardware to the software that

41
00:01:43,229 --> 00:01:45,960
ultimately uses the system and it's a

42
00:01:45,960 --> 00:01:49,320
successful real world design so it says

43
00:01:49,320 --> 00:01:51,030
you know academic paper published in an

44
00:01:51,030 --> 00:01:53,189
academic conference but it describes

45
00:01:53,189 --> 00:01:54,890
something that really was successful and

46
00:01:54,890 --> 00:01:57,030
used for a long time in the real world

47
00:01:57,030 --> 00:01:58,650
so we sort of know that we're talking

48
00:01:58,650 --> 00:02:02,340
about something that is it's a good a

49
00:02:02,340 --> 00:02:07,110
good useful design okay so before I'm

50
00:02:07,110 --> 00:02:09,149
gonna talk about GFS I want to sort of

51
00:02:09,149 --> 00:02:11,279
talk about the space of distributed

52
00:02:11,279 --> 00:02:13,030
storage systems a little bit

53
00:02:13,030 --> 00:02:18,810
set the scene so first why is it hard

54
00:02:19,920 --> 00:02:23,560
it's actually a lot to get right but for

55
00:02:23,560 --> 00:02:25,900
a 2/4 there's a particular sort of

56
00:02:25,900 --> 00:02:28,330
narrative that's gonna come up quite a

57
00:02:28,330 --> 00:02:32,140
lot for many systems often the starting

58
00:02:32,140 --> 00:02:34,180
point for people designing these sort of

59
00:02:34,180 --> 00:02:35,890
big distributed systems or big storage

60
00:02:35,890 --> 00:02:37,330
systems is they want to get huge

61
00:02:37,330 --> 00:02:39,340
aggregate performance be able to harness

62
00:02:39,340 --> 00:02:43,090
the resources of hundreds of machines in

63
00:02:43,090 --> 00:02:44,620
order to get a huge amount of work done

64
00:02:44,620 --> 00:02:48,000
so the sort of starting point is often

65
00:02:48,000 --> 00:02:54,430
performance and you know if you start

66
00:02:54,430 --> 00:02:57,010
there a natural next thought is well

67
00:02:57,010 --> 00:02:59,019
we're gonna split our data over a huge

68
00:02:59,019 --> 00:03:00,640
number of servers in order to be able to

69
00:03:00,640 --> 00:03:04,420
read many servers in parallel so we're

70
00:03:04,420 --> 00:03:05,769
gonna get and that's often called

71
00:03:05,769 --> 00:03:11,160
sharding if you shard over many servers

72
00:03:11,160 --> 00:03:13,600
hundreds or thousands of servers you're

73
00:03:13,600 --> 00:03:15,970
just gonna see constant faults right if

74
00:03:15,970 --> 00:03:17,140
you have thousands of servers there's

75
00:03:17,140 --> 00:03:20,680
just always gonna be one down so we

76
00:03:20,680 --> 00:03:25,540
the faults are just every day every hour

77
00:03:25,540 --> 00:03:27,250
occurrences and we need automatic

78
00:03:27,250 --> 00:03:29,350
we can't have human involved and fixing

79
00:03:29,350 --> 00:03:31,890
this fault we need automatic

80
00:03:31,890 --> 00:03:38,290
fault-tolerant systems so that leads to

81
00:03:38,290 --> 00:03:43,090
fault tolerance the among the most

82
00:03:43,090 --> 00:03:44,920
powerful ways to get fault tolerance is

83
00:03:44,920 --> 00:03:46,630
with replication just keep two or three

84
00:03:46,630 --> 00:03:48,190
or whatever copies of data one of them

85
00:03:48,190 --> 00:03:52,390
fails you can use another one so we want

86
00:03:52,390 --> 00:03:56,010
to have tolerance that leads to

87
00:03:56,010 --> 00:04:03,100
replication if you have replication two

88
00:04:03,100 --> 00:04:05,470
copies the data then you know for sure

89
00:04:05,470 --> 00:04:07,329
if you're not careful they're gonna get

90
00:04:07,329 --> 00:04:09,010
out of sync and so what you thought was

91
00:04:09,010 --> 00:04:10,750
two replicas of the data where you could

92
00:04:10,750 --> 00:04:12,549
use either one interchangeably to

93
00:04:12,549 --> 00:04:14,170
tolerate faults if you're not careful

94
00:04:14,170 --> 00:04:15,670
what you end up with is two almost

95
00:04:15,670 --> 00:04:18,640
identical replicas of the data that's

96
00:04:18,640 --> 00:04:20,289
like not exactly replicas at all and

97
00:04:20,289 --> 00:04:22,180
what you get back depends on which one

98
00:04:22,180 --> 00:04:24,039
you talk to so that's starting to maybe

99
00:04:24,039 --> 00:04:25,240
look a little bit

100
00:04:25,240 --> 00:04:28,420
tricky for applications to use so if we

101
00:04:28,420 --> 00:04:34,330
have replication we risk weird

102
00:04:34,330 --> 00:04:41,800
inconsistencies of course clever design

103
00:04:41,800 --> 00:04:45,400
you can get rid of inconsistency and

104
00:04:45,400 --> 00:04:47,680
make the data look very well-behaved but

105
00:04:47,680 --> 00:04:49,450
if you do that it almost always requires

106
00:04:49,450 --> 00:04:51,210
extra work and extra sort of chitchat

107
00:04:51,210 --> 00:04:53,140
between all the different servers and

108
00:04:53,140 --> 00:04:54,610
clients in the network that reduces

109
00:04:54,610 --> 00:04:58,470
performance so if you want consistency

110
00:04:59,550 --> 00:05:09,190
you pay for with low performance I which

111
00:05:09,190 --> 00:05:11,740
is of course not what we originally

112
00:05:11,740 --> 00:05:13,420
hoping for of course this is an absolute

113
00:05:13,420 --> 00:05:14,650
you can build very high performance

114
00:05:14,650 --> 00:05:16,990
systems but nevertheless there's this

115
00:05:16,990 --> 00:05:19,480
sort of inevitable way that the design

116
00:05:19,480 --> 00:05:21,370
of these systems play out and it results

117
00:05:21,370 --> 00:05:24,670
in a tension between the original goals

118
00:05:24,670 --> 00:05:26,920
of performance and the sort of

119
00:05:26,920 --> 00:05:29,020
realization that if you want good

120
00:05:29,020 --> 00:05:31,720
consistency you're gonna pay for it and

121
00:05:31,720 --> 00:05:33,730
if you don't want to pay for it then you

122
00:05:33,730 --> 00:05:35,830
have to suffer with sort of anomalous

123
00:05:35,830 --> 00:05:37,930
behavior sometimes I'm putting this up

124
00:05:37,930 --> 00:05:39,840
because we're gonna see this this loop

125
00:05:39,840 --> 00:05:42,310
many times for many of the systems we

126
00:05:42,310 --> 00:05:45,580
look we look at people are rarely

127
00:05:45,580 --> 00:05:48,070
willing to or happy about paying the

128
00:05:48,070 --> 00:05:52,930
full cost of very good consistency ok so

129
00:05:52,930 --> 00:05:57,520
you know with brought a consistency I'll

130
00:05:57,520 --> 00:06:02,050
talk more later in the course about more

131
00:06:02,050 --> 00:06:04,000
exactly what I mean by good consistency

132
00:06:04,000 --> 00:06:07,000
but you can think of strong consistency

133
00:06:07,000 --> 00:06:09,280
or good consistency as being we want to

134
00:06:09,280 --> 00:06:11,410
build a system whose behavior to

135
00:06:11,410 --> 00:06:13,930
applications or clients looks just like

136
00:06:13,930 --> 00:06:15,610
you'd expect from talking to a single

137
00:06:15,610 --> 00:06:18,760
server all right we're gonna build you

138
00:06:18,760 --> 00:06:20,260
know systems out of hundreds of machines

139
00:06:20,260 --> 00:06:23,170
but a kind of ideal strong consistency

140
00:06:23,170 --> 00:06:25,000
model would be what you'd get if there

141
00:06:25,000 --> 00:06:26,560
was just one server with one copy of the

142
00:06:26,560 --> 00:06:31,810
data doing one thing at a time so this

143
00:06:31,810 --> 00:06:34,349
is kind of a strong

144
00:06:34,349 --> 00:06:41,169
consistency kind of intuitive way to

145
00:06:41,169 --> 00:06:42,789
think about strong consistency so you

146
00:06:42,789 --> 00:06:45,490
might think you have one server we'll

147
00:06:45,490 --> 00:06:47,020
assume that's a single-threaded server

148
00:06:47,020 --> 00:06:49,210
and that it processes requests from

149
00:06:49,210 --> 00:06:50,919
clients one at a time and that's

150
00:06:50,919 --> 00:06:52,569
important because there may be lots of

151
00:06:52,569 --> 00:06:55,509
clients sending concurrently requests

152
00:06:55,509 --> 00:06:57,370
into the server and see some current

153
00:06:57,370 --> 00:06:59,020
requests it picks one or the other to go

154
00:06:59,020 --> 00:07:00,729
first and excuse that request to

155
00:07:00,729 --> 00:07:04,090
completion then excuse the nets so for

156
00:07:04,090 --> 00:07:06,099
storage servers or you know the server's

157
00:07:06,099 --> 00:07:07,629
got a disk on it and what it means to

158
00:07:07,629 --> 00:07:10,060
process a request is it's a write

159
00:07:10,060 --> 00:07:12,610
request you know which might be writing

160
00:07:12,610 --> 00:07:14,710
an item or may be increment and I mean

161
00:07:14,710 --> 00:07:17,979
incrementing an item if it's a mutation

162
00:07:17,979 --> 00:07:21,069
then we're gonna go and we have some

163
00:07:21,069 --> 00:07:23,680
table of data and you know maybe index

164
00:07:23,680 --> 00:07:25,240
by keys and values and we're gonna

165
00:07:25,240 --> 00:07:27,039
update this table and if the request

166
00:07:27,039 --> 00:07:28,240
comes in and to read we're just gonna

167
00:07:28,240 --> 00:07:30,099
you know pull the write data out of the

168
00:07:30,099 --> 00:07:36,759
table one of the rules here that sort of

169
00:07:36,759 --> 00:07:39,580
makes this well-behaved is that each is

170
00:07:39,580 --> 00:07:41,740
that the server really does execute in

171
00:07:41,740 --> 00:07:44,710
our simplified model excuse to request

172
00:07:44,710 --> 00:07:48,129
one at a time and that requests see data

173
00:07:48,129 --> 00:07:49,990
that reflects all the previous

174
00:07:49,990 --> 00:07:51,819
operations in order so if a sequence of

175
00:07:51,819 --> 00:07:53,560
writes come in and the server process

176
00:07:53,560 --> 00:07:55,360
them in some order then when you read

177
00:07:55,360 --> 00:07:58,060
you see the sort of you know value you

178
00:07:58,060 --> 00:08:00,009
would expect if those writes that

179
00:08:00,009 --> 00:08:05,169
occurred one at a time the behavior this

180
00:08:05,169 --> 00:08:07,029
is still not completely straightforward

181
00:08:07,029 --> 00:08:09,659
there's some you know there's some

182
00:08:09,659 --> 00:08:11,919
things that you have to spend at least a

183
00:08:11,919 --> 00:08:13,629
second thinking about so for example if

184
00:08:13,629 --> 00:08:19,539
we have a bunch of clients and client

185
00:08:19,539 --> 00:08:25,180
one issues a write of value X and wants

186
00:08:25,180 --> 00:08:27,460
it to set it to one and at the same time

187
00:08:27,460 --> 00:08:30,460
client two issues the right of the same

188
00:08:30,460 --> 00:08:32,159
value but wants to set it to a different

189
00:08:32,159 --> 00:08:34,360
the same key but wants to set it to a

190
00:08:34,360 --> 00:08:35,860
different value right

191
00:08:35,860 --> 00:08:38,409
something happens let's say client three

192
00:08:38,409 --> 00:08:42,490
reads and get some result or client

193
00:08:42,490 --> 00:08:44,020
three after these writes complete reads

194
00:08:44,020 --> 00:08:47,220
get some result client four

195
00:08:47,220 --> 00:08:50,290
reads X and get some also gets a result

196
00:08:50,290 --> 00:08:51,999
so what results should the two clients

197
00:08:51,999 --> 00:09:00,959
see yeah

198
00:09:04,700 --> 00:09:07,200
well that's a good question so these

199
00:09:07,200 --> 00:09:09,060
what I'm assuming here is that client

200
00:09:09,060 --> 00:09:10,770
one inclined to launch these requests at

201
00:09:10,770 --> 00:09:12,720
the same time so if we were monitoring

202
00:09:12,720 --> 00:09:14,190
the network we'd see two requests

203
00:09:14,190 --> 00:09:16,500
heading to the server at the same time

204
00:09:16,500 --> 00:09:19,710
and then sometime later the server would

205
00:09:19,710 --> 00:09:20,520
respond to them

206
00:09:20,520 --> 00:09:23,790
so there's actually not enough here to

207
00:09:23,790 --> 00:09:26,070
be able to say whether the client would

208
00:09:26,070 --> 00:09:28,530
receipt would process the first request

209
00:09:28,530 --> 00:09:30,780
first which order there's not enough

210
00:09:30,780 --> 00:09:32,880
here to tell which order the server

211
00:09:32,880 --> 00:09:35,460
processes them in and of course if it

212
00:09:35,460 --> 00:09:38,580
processes this request first then that

213
00:09:38,580 --> 00:09:41,760
means or it processes the right with

214
00:09:41,760 --> 00:09:43,800
value to second and that means that

215
00:09:43,800 --> 00:09:46,350
subsequent reads have to see two where is

216
00:09:46,350 --> 00:09:48,030
it the server happened to process this

217
00:09:48,030 --> 00:09:50,250
request first and this one's second that

218
00:09:50,250 --> 00:09:52,020
means the resulting value better be one

219
00:09:52,020 --> 00:09:54,060
and these these two requests and see one

220
00:09:54,060 --> 00:09:56,670
so I'm just putting this up to sort

221
00:09:56,670 --> 00:09:58,950
of illustrate that even in a simple

222
00:09:58,950 --> 00:10:01,230
system there's ambiguity you can't

223
00:10:01,230 --> 00:10:04,020
necessarily tell from trace of what went

224
00:10:04,020 --> 00:10:05,190
into the server or what should come out

225
00:10:05,190 --> 00:10:08,820
all of you can tell is that some set of

226
00:10:08,820 --> 00:10:11,250
results is consistent or not consistent

227
00:10:11,250 --> 00:10:13,470
with a possible execution so certainly

228
00:10:13,470 --> 00:10:17,850
there's some completely wrong results we

229
00:10:17,850 --> 00:10:21,060
can see go by it you know if client 3

230
00:10:21,060 --> 00:10:24,030
sees a 2 then client 4 I bet had better

231
00:10:24,030 --> 00:10:27,210
see a two also because our model is

232
00:10:27,210 --> 00:10:29,040
well after the second write you know

233
00:10:29,040 --> 00:10:30,750
client tree sees it two that means

234
00:10:30,750 --> 00:10:33,870
this write must have been second and it

235
00:10:33,870 --> 00:10:35,700
still had better be it still has to have

236
00:10:35,700 --> 00:10:37,620
been the second write one client 4 goes

237
00:10:37,620 --> 00:10:41,220
to the date so hopefully all this is

238
00:10:41,220 --> 00:10:43,410
just completely straightforward and just

239
00:10:43,410 --> 00:10:47,790
as expected because it's it's supposed

240
00:10:47,790 --> 00:10:49,200
to be the intuitive model of strong

241
00:10:49,200 --> 00:10:53,190
consistency ok and so the problem with

242
00:10:53,190 --> 00:10:54,300
this of course is that a single server

243
00:10:54,300 --> 00:10:56,370
has poor fault tolerance right if it

244
00:10:56,370 --> 00:10:57,840
crashes or it's disk dies or something

245
00:10:57,840 --> 00:11:00,870
we're left with nothing and so in the

246
00:11:00,870 --> 00:11:02,520
real world of distributed systems we

247
00:11:02,520 --> 00:11:05,430
actually build replicated systems so and

248
00:11:05,430 --> 00:11:06,930
that's where all the problems start

249
00:11:06,930 --> 00:11:08,220
leaking in is when we have a second

250
00:11:08,220 --> 00:11:12,060
copying data so here is what must be

251
00:11:12,060 --> 00:11:16,180
close to the worst replication design

252
00:11:16,180 --> 00:11:19,220
and I'm doing this to warn you of the

253
00:11:19,220 --> 00:11:20,810
problems that we will then be looking

254
00:11:20,810 --> 00:11:23,960
for in GFS all right so here's a bad

255
00:11:23,960 --> 00:11:30,380
replication design we're gonna have two

256
00:11:30,380 --> 00:11:32,630
servers now each with a complete copy of

257
00:11:32,630 --> 00:11:38,510
the data and so on disks that are both

258
00:11:38,510 --> 00:11:40,730
gonna have this this table of keys and

259
00:11:40,730 --> 00:11:44,810
values the intuition of course is that

260
00:11:44,810 --> 00:11:47,090
we want to keep these tables we hope to

261
00:11:47,090 --> 00:11:49,880
keep these tables identical so that if

262
00:11:49,880 --> 00:11:51,650
one server fails we can read or write

263
00:11:51,650 --> 00:11:53,720
from the other server and so that means

264
00:11:53,720 --> 00:11:55,490
that somehow every write must be

265
00:11:55,490 --> 00:11:59,210
processed by both servers and reads have

266
00:11:59,210 --> 00:12:00,890
to be able to be processed by a single

267
00:12:00,890 --> 00:12:02,570
server otherwise it's not fault tolerant

268
00:12:02,570 --> 00:12:04,280
all right if reads have to consult both

269
00:12:04,280 --> 00:12:07,940
and we can't survive the loss of one of

270
00:12:07,940 --> 00:12:13,160
the servers okay so the problem is gonna

271
00:12:13,160 --> 00:12:17,030
come up well I suppose we have client 1

272
00:12:17,030 --> 00:12:19,190
and client 2 and they both want to do

273
00:12:19,190 --> 00:12:20,570
these write say one of them gonna write

274
00:12:20,570 --> 00:12:22,250
one and the other is going to write two

275
00:12:22,250 --> 00:12:25,790
so client 1 is gonna launch it's write

276
00:12:25,790 --> 00:12:29,270
x1 2 both because we want to update both

277
00:12:29,270 --> 00:12:32,600
of them and clent 2 is gonna launch it's

278
00:12:32,600 --> 00:12:41,800
write X so what's gonna go wrong here

279
00:12:41,800 --> 00:12:46,280
yeah yeah we haven't done anything here

280
00:12:46,280 --> 00:12:48,410
to ensure that the two servers process

281
00:12:48,410 --> 00:12:51,590
the two requests in the same order right

282
00:12:51,590 --> 00:12:53,930
that's a bad design

283
00:12:53,930 --> 00:12:57,800
so if server 1 processes client ones

284
00:12:57,800 --> 00:13:01,100
request first it'll end up it'll start

285
00:13:01,100 --> 00:13:02,600
with a value of 1 and then it'll see

286
00:13:02,600 --> 00:13:04,610
client twos request and overwrite that

287
00:13:04,610 --> 00:13:07,610
with 2 if server 2 just happens to

288
00:13:07,610 --> 00:13:09,350
receive the packets over the network in

289
00:13:09,350 --> 00:13:11,020
a different order it's going to execute

290
00:13:11,020 --> 00:13:13,310
client 2's requests and set the value to

291
00:13:13,310 --> 00:13:15,350
2 and then then it will see client ones

292
00:13:15,350 --> 00:13:18,140
request set the value to 1 and now what

293
00:13:18,140 --> 00:13:20,450
a client a later reading client sees you

294
00:13:20,450 --> 00:13:22,760
know if client 3 happens to reach from

295
00:13:22,760 --> 00:13:25,520
this server and client for happens to

296
00:13:25,520 --> 00:13:26,720
reach from the other server then we get

297
00:13:26,720 --> 00:13:28,610
into this terrible situation where

298
00:13:28,610 --> 00:13:30,320
they're gonna read different values even

299
00:13:30,320 --> 00:13:33,410
though our intuitive model of a correct

300
00:13:33,410 --> 00:13:35,990
service says they both subsequent reads

301
00:13:35,990 --> 00:13:39,589
have to yeild the same value and this can

302
00:13:39,589 --> 00:13:41,930
arise in other ways you know suppose we

303
00:13:41,930 --> 00:13:43,579
try to fix this by making the clients

304
00:13:43,579 --> 00:13:45,920
always read from server one if it's up

305
00:13:45,920 --> 00:13:48,829
and otherwise server two if we do that

306
00:13:48,829 --> 00:13:51,350
then if this situation happened and four

307
00:13:51,350 --> 00:13:53,089
why oh yeah both everybody reads might

308
00:13:53,089 --> 00:13:55,279
see client might see value too but a

309
00:13:55,279 --> 00:13:57,649
server one suddenly fails then even

310
00:13:57,649 --> 00:14:00,290
though there was no right suddenly the

311
00:14:00,290 --> 00:14:02,050
value for X we'll switch from 2 to 1

312
00:14:02,050 --> 00:14:04,850
because if server 1 died it's all the

313
00:14:04,850 --> 00:14:07,130
clients assistant server 2 no but just

314
00:14:07,130 --> 00:14:09,079
this mysterious change in the data that

315
00:14:09,079 --> 00:14:11,570
doesn't correspond to any right which is

316
00:14:11,570 --> 00:14:13,190
also totally not something that could

317
00:14:13,190 --> 00:14:15,680
have happened in this service simple

318
00:14:15,680 --> 00:14:23,329
server model all right so of course this

319
00:14:23,329 --> 00:14:25,940
can be fixed the fix requires more

320
00:14:25,940 --> 00:14:28,220
communication usually between the

321
00:14:28,220 --> 00:14:33,529
servers or somewhere more complexity and

322
00:14:33,529 --> 00:14:36,649
because of the cost of inevitable cost

323
00:14:36,649 --> 00:14:37,820
to the complexity to get strong

324
00:14:37,820 --> 00:14:41,180
consistency there's a whole range of

325
00:14:41,180 --> 00:14:43,610
different solutions to get better

326
00:14:43,610 --> 00:14:45,769
consistency and a whole range of what

327
00:14:45,769 --> 00:14:48,350
people feel is an acceptable level of

328
00:14:48,350 --> 00:14:52,250
consistency in an acceptable sort of a

329
00:14:52,250 --> 00:14:54,890
set of anomalous behaviors that might be

330
00:14:54,890 --> 00:14:57,560
revealed all right any questions about

331
00:14:57,560 --> 00:15:03,910
this disastrous model here

332
00:15:04,649 --> 00:15:07,779
okay that's what you're talking about

333
00:15:07,779 --> 00:15:13,209
GFS a lot of thought about doing GFS was

334
00:15:13,209 --> 00:15:17,079
doing is fixing this they had better but

335
00:15:17,079 --> 00:15:21,790
not perfect behavior okay so where GFS

336
00:15:21,790 --> 00:15:24,179
came from in 2003 quite a while ago

337
00:15:24,179 --> 00:15:27,730
actually at that time the the web you

338
00:15:27,730 --> 00:15:29,379
know was certainly starting to be a very

339
00:15:29,379 --> 00:15:31,569
big deal and people are building big

340
00:15:31,569 --> 00:15:35,439
websites in addition there had been

341
00:15:35,439 --> 00:15:37,540
decades of research into distributed

342
00:15:37,540 --> 00:15:39,009
systems and people sort of knew at least

343
00:15:39,009 --> 00:15:40,509
at the academic level how to build all

344
00:15:40,509 --> 00:15:43,119
kinds of highly parallel fault tolerant

345
00:15:43,119 --> 00:15:44,739
whatever systems but there been very

346
00:15:44,739 --> 00:15:49,589
little use of academic ideas in industry

347
00:15:49,589 --> 00:15:52,239
but starting at around the time this

348
00:15:52,239 --> 00:15:54,759
paper was published big websites like

349
00:15:54,759 --> 00:15:57,399
Google started to actually build serious

350
00:15:57,399 --> 00:16:01,569
distributed systems and it was like very

351
00:16:01,569 --> 00:16:03,699
exciting for people like me who were on

352
00:16:03,699 --> 00:16:06,879
academic side of this to see see real

353
00:16:06,879 --> 00:16:10,119
uses of these ideas where Google was

354
00:16:10,119 --> 00:16:11,769
coming from was you know they had some

355
00:16:11,769 --> 00:16:14,470
vast vast data sets far larger than

356
00:16:14,470 --> 00:16:16,360
could be stored in a single disk like an

357
00:16:16,360 --> 00:16:20,769
entire crawl copy of the web or a little

358
00:16:20,769 --> 00:16:22,119
bit after this paper they had giant

359
00:16:22,119 --> 00:16:25,480
YouTube videos they had things like the

360
00:16:25,480 --> 00:16:27,669
intermedia files for building a search

361
00:16:27,669 --> 00:16:28,299
index

362
00:16:28,299 --> 00:16:30,790
they also apparently kept enormous log

363
00:16:30,790 --> 00:16:32,679
files from all their web servers so they

364
00:16:32,679 --> 00:16:34,029
could later analyze them so they had

365
00:16:34,029 --> 00:16:36,910
some big big data sets they used both to

366
00:16:36,910 --> 00:16:39,339
store them and many many disks to store

367
00:16:39,339 --> 00:16:41,139
them and they needed to be able to

368
00:16:41,139 --> 00:16:42,399
process them quickly with things like

369
00:16:42,399 --> 00:16:44,709
MapReduce so they needed high speed

370
00:16:44,709 --> 00:16:47,529
parallel access to these vast amounts of

371
00:16:47,529 --> 00:16:51,819
data okay so what they were looking for

372
00:16:51,819 --> 00:16:53,669
one goal was just that the thing be big

373
00:16:53,669 --> 00:17:00,009
and fast they also wanted a file system

374
00:17:00,009 --> 00:17:02,470
that was sort of global in the sense

375
00:17:02,470 --> 00:17:04,148
that many different applications could

376
00:17:04,148 --> 00:17:06,490
get at it one way to build a big storage

377
00:17:06,490 --> 00:17:07,990
system is to you know you have some

378
00:17:07,990 --> 00:17:09,398
particular application or mining you

379
00:17:09,398 --> 00:17:11,260
build storage sort of dedicated and

380
00:17:11,260 --> 00:17:13,119
tailored to that application and if

381
00:17:13,119 --> 00:17:14,829
somebody else in the next office needs

382
00:17:14,829 --> 00:17:17,079
big storage well they can build their

383
00:17:17,079 --> 00:17:17,680
own thing

384
00:17:17,680 --> 00:17:21,099
right but if you have a universal server

385
00:17:21,099 --> 00:17:25,300
kind of global reusable storage system

386
00:17:25,300 --> 00:17:28,030
and that means that if I store a huge

387
00:17:28,030 --> 00:17:29,710
amount of data si you know I'm crawling

388
00:17:29,710 --> 00:17:31,600
the web and you want to look at my

389
00:17:31,600 --> 00:17:35,290
crawled web web pages because we're all

390
00:17:35,290 --> 00:17:36,580
using we're all playing in the same

391
00:17:36,580 --> 00:17:38,740
sandbox we're all using the same storage

392
00:17:38,740 --> 00:17:40,750
system you can just read my files you

393
00:17:40,750 --> 00:17:43,480
know maybe access controls permitting so

394
00:17:43,480 --> 00:17:45,190
the idea was to build a sort of file

395
00:17:45,190 --> 00:17:47,110
system where anybody you know anybody

396
00:17:47,110 --> 00:17:50,080
inside Google could name and read any of

397
00:17:50,080 --> 00:17:57,010
the files to allow sharing in order to

398
00:17:57,010 --> 00:17:58,540
get a in order to get bigness and

399
00:17:58,540 --> 00:18:00,300
fastness they need to split the data

400
00:18:00,300 --> 00:18:04,990
through every file will be automatically

401
00:18:04,990 --> 00:18:07,900
split by GFS over many servers so that

402
00:18:07,900 --> 00:18:08,950
writes and reads would just

403
00:18:08,950 --> 00:18:10,780
automatically be fast as long as you

404
00:18:10,780 --> 00:18:12,730
were reading from lots and lots of

405
00:18:12,730 --> 00:18:14,770
reading a file from lots of clients you

406
00:18:14,770 --> 00:18:17,860
get high aggregate throughput and also

407
00:18:17,860 --> 00:18:20,230
be able to for a single file be able to

408
00:18:20,230 --> 00:18:21,670
have single files that were bigger than

409
00:18:21,670 --> 00:18:24,730
any single disk because we're building

410
00:18:24,730 --> 00:18:26,170
something out of hundreds of servers we

411
00:18:26,170 --> 00:18:36,430
want automatic feel your recovery we

412
00:18:36,430 --> 00:18:37,480
don't want to build a system where every

413
00:18:37,480 --> 00:18:38,860
time one of our hundreds of servers a

414
00:18:38,860 --> 00:18:40,540
fail some human being has to go to the

415
00:18:40,540 --> 00:18:42,490
machine room and do something with the

416
00:18:42,490 --> 00:18:44,830
server or to get it up and running or

417
00:18:44,830 --> 00:18:46,870
transfers data or something well this

418
00:18:46,870 --> 00:18:50,130
isn't just fix itself um there were some

419
00:18:50,130 --> 00:18:54,370
sort of non goals like one is that GFS

420
00:18:54,370 --> 00:18:55,930
was designed to run in a single data

421
00:18:55,930 --> 00:18:57,340
center so we're not talking about

422
00:18:57,340 --> 00:18:59,950
placing replicas all over the world a

423
00:18:59,950 --> 00:19:02,410
single GFS installation just lived in

424
00:19:02,410 --> 00:19:05,200
one one data center one big machine run

425
00:19:05,200 --> 00:19:12,190
so getting this style system to work

426
00:19:12,190 --> 00:19:14,860
where the replicas are far distant from

427
00:19:14,860 --> 00:19:17,550
each other is a valuable goal but

428
00:19:17,550 --> 00:19:22,720
difficult so single data centers this is

429
00:19:22,720 --> 00:19:25,540
not a service to customers GFS was for

430
00:19:25,540 --> 00:19:27,920
internal use by

431
00:19:27,920 --> 00:19:30,210
applications written by Google engineers

432
00:19:30,210 --> 00:19:32,400
so it wasn't they weren't directly

433
00:19:32,400 --> 00:19:33,810
selling this they might be selling

434
00:19:33,810 --> 00:19:37,170
services they used GFS internally but

435
00:19:37,170 --> 00:19:38,520
they weren't selling it directly so it's

436
00:19:38,520 --> 00:19:45,660
just for internal use and it was

437
00:19:45,660 --> 00:19:48,630
tailored in a number of ways for big

438
00:19:48,630 --> 00:19:51,180
sequential file reads and writes there's

439
00:19:51,180 --> 00:19:54,180
a whole nother domain like a system of

440
00:19:54,180 --> 00:19:56,490
storage systems that are optimized for

441
00:19:56,490 --> 00:19:58,590
small pieces of data like a bank that's

442
00:19:58,590 --> 00:20:00,090
holding bank balances probably wants a

443
00:20:00,090 --> 00:20:02,100
database that can read and write an

444
00:20:02,100 --> 00:20:04,380
update you know 100 byte records that

445
00:20:04,380 --> 00:20:07,230
hold people's bank balances but GFS is

446
00:20:07,230 --> 00:20:10,230
not that system so it's really for big

447
00:20:10,230 --> 00:20:12,600
or big is you know terabytes gigabytes

448
00:20:12,600 --> 00:20:21,350
some big sequential not random access

449
00:20:22,640 --> 00:20:24,690
it's also that has a certain batch

450
00:20:24,690 --> 00:20:26,340
flavor there's not a huge amount of

451
00:20:26,340 --> 00:20:27,840
effort to make access be very low

452
00:20:27,840 --> 00:20:30,000
latency the focus is really on

453
00:20:30,000 --> 00:20:32,880
throughput of big you know multi

454
00:20:32,880 --> 00:20:36,780
megabyte operations this paper was

455
00:20:36,780 --> 00:20:39,560
published at SOSP in 2003 the top

456
00:20:39,560 --> 00:20:46,860
system's academic conference yeah usually

457
00:20:46,860 --> 00:20:49,080
the standard for papers such conferences

458
00:20:49,080 --> 00:20:51,260
they have you know a lot of very novel

459
00:20:51,260 --> 00:20:54,060
research this paper was not necessarily

460
00:20:54,060 --> 00:20:55,920
in that class the specific ideas in this

461
00:20:55,920 --> 00:20:57,750
paper none of them are particularly new

462
00:20:57,750 --> 00:21:00,990
at the time and things like distribution

463
00:21:00,990 --> 00:21:02,510
and sharding and fault tolerance were

464
00:21:02,510 --> 00:21:05,340
you know well understood had to had to

465
00:21:05,340 --> 00:21:07,620
deliver those but this paper described a

466
00:21:07,620 --> 00:21:09,480
system that was really operating in in

467
00:21:09,480 --> 00:21:11,970
use at a far far larger scale hundreds

468
00:21:11,970 --> 00:21:13,680
of thousands of machines much bigger

469
00:21:13,680 --> 00:21:16,400
than any you know academics ever built

470
00:21:16,400 --> 00:21:18,960
the fact that it was used in industry

471
00:21:18,960 --> 00:21:21,450
and reflected real world experience of

472
00:21:21,450 --> 00:21:23,370
like what actually didn't didn't work

473
00:21:23,370 --> 00:21:25,490
for deployed systems that had to work

474
00:21:25,490 --> 00:21:28,950
and had to be cost effective also like

475
00:21:28,950 --> 00:21:34,080
extremely valuable the paper sort of

476
00:21:34,080 --> 00:21:39,090
proposed a fairly heretical view that it

477
00:21:39,090 --> 00:21:40,800
was okay for the storage system to have

478
00:21:40,800 --> 00:21:41,270
pretty

479
00:21:41,270 --> 00:21:45,440
consistency we the academic mindset at

480
00:21:45,440 --> 00:21:46,550
that time was the you know the storage

481
00:21:46,550 --> 00:21:47,780
system really should have good behavior

482
00:21:47,780 --> 00:21:48,830
like what's the point of building

483
00:21:48,830 --> 00:21:50,780
systems that sort of return the wrong

484
00:21:50,780 --> 00:21:53,750
data like my terrible replication system

485
00:21:53,750 --> 00:21:55,400
like why do that why not build systems

486
00:21:55,400 --> 00:21:57,020
return the right data correct data

487
00:21:57,020 --> 00:21:59,240
instead of incorrect data now with this

488
00:21:59,240 --> 00:22:02,570
paper actually does not guarantee return

489
00:22:02,570 --> 00:22:05,960
correct data and you know the hope is

490
00:22:05,960 --> 00:22:07,130
that they take advantage of that in

491
00:22:07,130 --> 00:22:09,440
order to get better performance I'm a

492
00:22:09,440 --> 00:22:11,900
final thing that was sort of interesting

493
00:22:11,900 --> 00:22:13,580
about this paper is its use of a single

494
00:22:13,580 --> 00:22:16,370
master in a sort of academic paper you

495
00:22:16,370 --> 00:22:18,020
probably have some fault-tolerant

496
00:22:18,020 --> 00:22:20,900
replicated automatic failure recovering

497
00:22:20,900 --> 00:22:24,110
master perhaps many masters with the

498
00:22:24,110 --> 00:22:25,550
work split open um but this paper said

499
00:22:25,550 --> 00:22:26,960
look you know you they can get away with

500
00:22:26,960 --> 00:22:39,260
a single master and it worked fine well

501
00:22:39,260 --> 00:22:40,610
cynically you know who's going to notice

502
00:22:40,610 --> 00:22:43,010
on the web that some vote count or

503
00:22:43,010 --> 00:22:44,920
something is wrong or if you do a search

504
00:22:44,920 --> 00:22:47,510
on a search engine now you're gonna know

505
00:22:47,510 --> 00:22:50,480
that oh you know like one of 20,000

506
00:22:50,480 --> 00:22:51,890
items is missing from the search results

507
00:22:51,890 --> 00:22:54,860
or they're in the wrong order probably

508
00:22:54,860 --> 00:22:58,130
not so there was just much more

509
00:22:58,130 --> 00:22:59,510
tolerance in these kind of systems than

510
00:22:59,510 --> 00:23:02,210
there would like in a bank for incorrect

511
00:23:02,210 --> 00:23:04,070
data it doesn't mean that all data and

512
00:23:04,070 --> 00:23:05,630
websites can be wrong like if you're

513
00:23:05,630 --> 00:23:07,880
charging people for ad impressions you

514
00:23:07,880 --> 00:23:09,890
better get the numbers right but this is

515
00:23:09,890 --> 00:23:15,830
not really about that in addition some

516
00:23:15,830 --> 00:23:18,370
of the ways in which GFS could serve up

517
00:23:18,370 --> 00:23:21,770
odd data could be compensated for in the

518
00:23:21,770 --> 00:23:23,540
applications like where the paper says

519
00:23:23,540 --> 00:23:25,490
you know applications should accompany

520
00:23:25,490 --> 00:23:28,040
their data with checksums and clearly

521
00:23:28,040 --> 00:23:30,260
mark record boundaries that's so the

522
00:23:30,260 --> 00:23:32,380
applications can recover from GFS

523
00:23:32,380 --> 00:23:35,480
serving them maybe not quite the right

524
00:23:35,480 --> 00:23:37,690
data

525
00:23:40,970 --> 00:23:44,730
all right so the general structure and

526
00:23:44,730 --> 00:23:48,840
this is just figure one in the paper so

527
00:23:48,840 --> 00:23:53,850
we have a bunch of clients hundreds

528
00:23:53,850 --> 00:23:57,920
hundreds of clients we have one master

529
00:23:59,450 --> 00:24:02,040
although there might be replicas of the

530
00:24:02,040 --> 00:24:07,140
master the master keeps the mapping from

531
00:24:07,140 --> 00:24:09,510
file names to where to find the data

532
00:24:09,510 --> 00:24:10,980
basically although there's really two

533
00:24:10,980 --> 00:24:14,100
tables so and then there's a bunch of

534
00:24:14,100 --> 00:24:18,390
chunk servers maybe hundreds of chunk

535
00:24:18,390 --> 00:24:21,090
servers each with perhaps one or two

536
00:24:21,090 --> 00:24:23,640
discs the separation here's the master

537
00:24:23,640 --> 00:24:25,320
is all about naming and knowing where

538
00:24:25,320 --> 00:24:27,480
the chunks are and the chunk servers

539
00:24:27,480 --> 00:24:29,400
store the actual data this is like a

540
00:24:29,400 --> 00:24:31,020
nice aspect of the design that these two

541
00:24:31,020 --> 00:24:32,760
concerns are almost completely separated

542
00:24:32,760 --> 00:24:35,880
from each other and can be designed just

543
00:24:35,880 --> 00:24:41,700
separately with separate properties the

544
00:24:41,700 --> 00:24:43,170
master knows about all the files for

545
00:24:43,170 --> 00:24:44,970
every file the master keeps track of a

546
00:24:44,970 --> 00:24:48,260
list of chunks chunk identifiers that

547
00:24:48,260 --> 00:24:50,880
contain the successive pieces that file

548
00:24:50,880 --> 00:24:53,400
each chunk is 64 megabytes so if I have

549
00:24:53,400 --> 00:24:57,090
a you know gigabyte file the master is

550
00:24:57,090 --> 00:24:58,590
gonna know that maybe the first chunk is

551
00:24:58,590 --> 00:25:00,059
stored here and the second chunk is

552
00:25:00,059 --> 00:25:01,559
stored here the third chunk is stored

553
00:25:01,559 --> 00:25:03,780
here and if I want to read whatever part

554
00:25:03,780 --> 00:25:05,490
of the file I need to ask the master oh

555
00:25:05,490 --> 00:25:07,260
which server hole is that chunk and I go

556
00:25:07,260 --> 00:25:09,000
talk to that server and read the chunk

557
00:25:09,000 --> 00:25:17,130
roughly speaking all right so more

558
00:25:17,130 --> 00:25:21,150
precisely we need to turns out if we're

559
00:25:21,150 --> 00:25:23,190
going to talk about how the system about

560
00:25:23,190 --> 00:25:24,690
the consistency of the system and how it

561
00:25:24,690 --> 00:25:27,360
deals with fault we need to know what

562
00:25:27,360 --> 00:25:29,100
the master is actually storing in a

563
00:25:29,100 --> 00:25:31,770
little bit more detail so the master

564
00:25:31,770 --> 00:25:34,190
data

565
00:25:36,190 --> 00:25:38,900
it's got two main tables that we care

566
00:25:38,900 --> 00:25:41,360
about it's got one table that map's file

567
00:25:41,360 --> 00:25:52,460
name to an array of chunk IDs or chunk

568
00:25:52,460 --> 00:26:00,830
handles this just tells you where to

569
00:26:00,830 --> 00:26:03,050
find the data or what the what the

570
00:26:03,050 --> 00:26:05,030
identifiers are the chunks are so it's

571
00:26:05,030 --> 00:26:06,620
not much yet you can do with a chunk

572
00:26:06,620 --> 00:26:08,840
identifier but the master also happens

573
00:26:08,840 --> 00:26:11,440
to have a a second table that map's

574
00:26:11,440 --> 00:26:17,570
chunk handles each chunk handle to a

575
00:26:17,570 --> 00:26:21,110
bunch of data about that chunk so one is

576
00:26:21,110 --> 00:26:23,330
the list of chunk servers that hold

577
00:26:23,330 --> 00:26:25,900
replicas of that data each chunk is

578
00:26:25,900 --> 00:26:28,040
stored on more than one chunk server so

579
00:26:28,040 --> 00:26:39,650
it's a list of chunk servers every chunk

580
00:26:39,650 --> 00:26:42,400
has a current version number so this

581
00:26:42,400 --> 00:26:46,610
master has a remembers the version

582
00:26:46,610 --> 00:26:50,150
number for each chunk all writes for a

583
00:26:50,150 --> 00:26:51,950
chunk have to be sequence of the chunks

584
00:26:51,950 --> 00:26:54,910
primary it's one of the replicas so

585
00:26:54,910 --> 00:26:58,880
master remembers the which chunk server's

586
00:26:58,880 --> 00:27:00,980
the primary and there's also that

587
00:27:00,980 --> 00:27:02,570
primary is only allowed to be primary

588
00:27:02,570 --> 00:27:05,450
for a certain lease time so the master

589
00:27:05,450 --> 00:27:13,370
remembers the expiration time of the

590
00:27:13,370 --> 00:27:17,240
lease this stuff so far it's all in RAM

591
00:27:17,240 --> 00:27:19,670
and the master so just be gone if the

592
00:27:19,670 --> 00:27:24,530
master crashed so in order that you'd be

593
00:27:24,530 --> 00:27:26,570
able to reboot the master and not forget

594
00:27:26,570 --> 00:27:29,150
everything about the file system the

595
00:27:29,150 --> 00:27:30,710
master actually stores all of this data

596
00:27:30,710 --> 00:27:35,180
on disk as well as in memory so reads

597
00:27:35,180 --> 00:27:38,270
just come from memory but writes to at

598
00:27:38,270 --> 00:27:40,490
least the parts of this data that had to

599
00:27:40,490 --> 00:27:42,140
be reflected on this writes have to go

600
00:27:42,140 --> 00:27:45,500
to the disk so and the way it actually

601
00:27:45,500 --> 00:27:47,510
managed that is that there's all

602
00:27:47,510 --> 00:27:51,290
the master has a log on disk and every

603
00:27:51,290 --> 00:27:53,750
time it changes the data it appends an

604
00:27:53,750 --> 00:27:59,380
entry to the log on disk and checkpoint

605
00:28:04,480 --> 00:28:07,220
so some of this stuff actually needs to

606
00:28:07,220 --> 00:28:10,600
be on disk and some doesn't it turns out

607
00:28:10,600 --> 00:28:12,980
I'm guessing a little bit here but

608
00:28:12,980 --> 00:28:16,190
certainly the array of chunk handles has

609
00:28:16,190 --> 00:28:18,050
to be on disk and so I'm gonna write env

610
00:28:18,050 --> 00:28:20,510
here for non-volatile meaning it it's

611
00:28:20,510 --> 00:28:22,850
got to be reflected on disk the list of

612
00:28:22,850 --> 00:28:25,610
chunk servers it turns out doesn't

613
00:28:25,610 --> 00:28:28,370
because the master if it reboots talks

614
00:28:28,370 --> 00:28:29,720
to all the chunk servers and ask them

615
00:28:29,720 --> 00:28:32,710
what chunks they have so this is I

616
00:28:32,710 --> 00:28:36,290
imagine not written to disk the version

617
00:28:36,290 --> 00:28:38,450
number any guesses written to disk not

618
00:28:38,450 --> 00:28:42,950
written to disk requires knowing how the

619
00:28:42,950 --> 00:28:51,830
system works I'm gonna vote written to

620
00:28:51,830 --> 00:28:55,790
disk non-volatile we can argue about

621
00:28:55,790 --> 00:28:57,500
that later when we talk about how system

622
00:28:57,500 --> 00:29:04,790
works identity the primary it turns out

623
00:29:04,790 --> 00:29:06,560
not almost certainly not written to disk

624
00:29:06,560 --> 00:29:10,640
so volatile and the reason is the master

625
00:29:10,640 --> 00:29:13,010
is um reboots and forgets therefore

626
00:29:13,010 --> 00:29:15,680
since it's volatile forgets who the

627
00:29:15,680 --> 00:29:17,330
primary is for a chunk it can simply

628
00:29:17,330 --> 00:29:19,910
wait for the 60-second lease expiration time

629
00:29:19,910 --> 00:29:21,920
and then it knows that absolutely no

630
00:29:21,920 --> 00:29:23,540
primary will be functioning for this

631
00:29:23,540 --> 00:29:24,920
chunk and then it can designate a

632
00:29:24,920 --> 00:29:27,020
different primary safely and similarly

633
00:29:27,020 --> 00:29:29,660
the lease expiration stuff is volatile

634
00:29:29,660 --> 00:29:32,840
so that means that whenever a file is

635
00:29:32,840 --> 00:29:35,030
extended with a new chunk goes to the

636
00:29:35,030 --> 00:29:40,100
next 64 megabyte boundary or the version

637
00:29:40,100 --> 00:29:42,710
number changes because the new primary

638
00:29:42,710 --> 00:29:45,740
is designated that means that the master

639
00:29:45,740 --> 00:29:48,440
has to first append a little record to

640
00:29:48,440 --> 00:29:50,900
his log basically saying oh I just added

641
00:29:50,900 --> 00:29:53,510
a such-and-such a chunk to this file or

642
00:29:53,510 --> 00:29:56,420
I just changed the version number so

643
00:29:56,420 --> 00:29:57,530
every time I change is one of those that

644
00:29:57,530 --> 00:29:59,360
needs to writes right it's disk so this

645
00:29:59,360 --> 00:30:00,830
is paper doesn't talk about this

646
00:30:00,830 --> 00:30:02,870
much but you know there's limits the

647
00:30:02,870 --> 00:30:05,090
rate at which the master can change

648
00:30:05,090 --> 00:30:07,039
things because you can only write your

649
00:30:07,039 --> 00:30:09,340
disk however many times per second and

650
00:30:09,340 --> 00:30:12,950
the reason for using a log rather than a

651
00:30:12,950 --> 00:30:16,279
database you know some sort of b-tree or

652
00:30:16,279 --> 00:30:20,179
hash table on disk is that you can

653
00:30:20,179 --> 00:30:23,980
append a log very efficiently because

654
00:30:24,010 --> 00:30:26,600
you only need you can take a bunch of

655
00:30:26,600 --> 00:30:28,309
recent log records they need to be added

656
00:30:28,309 --> 00:30:29,539
and sort of write them all on a single

657
00:30:29,539 --> 00:30:32,149
write after a single rotation to

658
00:30:32,149 --> 00:30:33,649
whatever the point in the disk is that

659
00:30:33,649 --> 00:30:36,080
contains the end of the log file whereas

660
00:30:36,080 --> 00:30:38,899
if it were a sort of b-tree reflecting

661
00:30:38,899 --> 00:30:42,080
the real structure of this data then you

662
00:30:42,080 --> 00:30:43,370
would have to seek to a random place in

663
00:30:43,370 --> 00:30:45,169
the disk and do a little right so the

664
00:30:45,169 --> 00:30:46,519
log makes a little bit faster to write

665
00:30:46,519 --> 00:30:51,620
there to reflect operations on to the

666
00:30:51,620 --> 00:30:56,570
disk however if the master crashes and

667
00:30:56,570 --> 00:30:58,789
has to reconstruct its state you

668
00:30:58,789 --> 00:31:00,409
wouldn't want to have to reread its log

669
00:31:00,409 --> 00:31:02,570
file back starting from the beginning of

670
00:31:02,570 --> 00:31:04,159
time from when the server was first

671
00:31:04,159 --> 00:31:06,559
installed you know a few years ago so in

672
00:31:06,559 --> 00:31:08,870
addition the master sometimes

673
00:31:08,870 --> 00:31:10,940
checkpoints its complete state to disk

674
00:31:10,940 --> 00:31:15,110
which takes some amount of time seconds

675
00:31:15,110 --> 00:31:17,779
maybe a minute or something and then

676
00:31:17,779 --> 00:31:20,210
when it restarts what it does is goes

677
00:31:20,210 --> 00:31:21,860
back to the most recent checkpoint and

678
00:31:21,860 --> 00:31:24,620
plays just the portion of a log that

679
00:31:24,620 --> 00:31:26,480
sort of starting at the point in time

680
00:31:26,480 --> 00:31:30,019
when that check one is created any

681
00:31:30,019 --> 00:31:39,340
questions about the master data okay

682
00:31:40,360 --> 00:31:44,029
so with that in mind I'm going to lay

683
00:31:44,029 --> 00:31:46,340
out the steps in a read and the steps in

684
00:31:46,340 --> 00:31:46,879
the right

685
00:31:46,879 --> 00:31:49,129
where all this is heading is that I then

686
00:31:49,129 --> 00:31:50,960
want to discuss you know for each

687
00:31:50,960 --> 00:31:53,840
failure I can think of why does the

688
00:31:53,840 --> 00:31:56,389
system or does the system act directly

689
00:31:56,389 --> 00:31:58,639
after that failure um but in order to do

690
00:31:58,639 --> 00:32:00,740
that we need to understand the data and

691
00:32:00,740 --> 00:32:03,470
operations in the data okay so if

692
00:32:03,470 --> 00:32:11,210
there's a read the first step is that

693
00:32:11,210 --> 00:32:12,980
the client and what a read means that

694
00:32:12,980 --> 00:32:14,749
the application has a file name in mind

695
00:32:14,749 --> 00:32:17,450
and an offset in the file that it wants

696
00:32:17,450 --> 00:32:19,279
to read some data front so it sends the

697
00:32:19,279 --> 00:32:21,799
file name and the offset to the master

698
00:32:21,799 --> 00:32:23,869
and the master looks up the file name in

699
00:32:23,869 --> 00:32:25,759
its file table and then you know each

700
00:32:25,759 --> 00:32:28,309
chunk is 64 megabytes who can use the

701
00:32:28,309 --> 00:32:30,889
offset divided by 64 megabytes to find

702
00:32:30,889 --> 00:32:33,649
which chunk and then it looks up that

703
00:32:33,649 --> 00:32:39,409
chunk in its chunk table finds the list

704
00:32:39,409 --> 00:32:41,869
of chunk servers that have replicas of

705
00:32:41,869 --> 00:32:44,509
that data and returns that list to the

706
00:32:44,509 --> 00:32:52,249
client so the first step is so you know

707
00:32:52,249 --> 00:32:56,809
the file name and the offset the master

708
00:32:56,809 --> 00:33:05,720
and the master sends the chunk handle

709
00:33:05,720 --> 00:33:11,450
let's say H and the list of servers so

710
00:33:11,450 --> 00:33:13,070
now we have some choice we can ask any

711
00:33:13,070 --> 00:33:15,590
one of these servers pick one that's and

712
00:33:15,590 --> 00:33:17,990
the paper says that clients try to guess

713
00:33:17,990 --> 00:33:19,429
which server is closest to them in the

714
00:33:19,429 --> 00:33:23,360
network maybe in the same rack and send

715
00:33:23,360 --> 00:33:27,279
the read request to that to that replica

716
00:33:28,480 --> 00:33:32,649
the client actually caches

717
00:33:35,550 --> 00:33:37,930
caches this result so that if it reads

718
00:33:37,930 --> 00:33:39,820
that chunk again and indeed the client

719
00:33:39,820 --> 00:33:41,560
might read a given chunk in you know one

720
00:33:41,560 --> 00:33:45,550
megabyte pieces or 64 kilobyte pieces or

721
00:33:45,550 --> 00:33:47,620
something so I may end up reading the

722
00:33:47,620 --> 00:33:49,410
same chunk different points successive

723
00:33:49,410 --> 00:33:51,730
regions of a chunk many times and so

724
00:33:51,730 --> 00:33:56,050
caches which server to talk to you for

725
00:33:56,050 --> 00:33:57,310
giving chunks so it doesn't have to keep

726
00:33:57,310 --> 00:33:59,020
beating on the master asking the master

727
00:33:59,020 --> 00:34:02,550
for the same information over and over

728
00:34:03,150 --> 00:34:07,330
now the client talks to one of the chunk

729
00:34:07,330 --> 00:34:12,880
servers tells us a chunk handling offset

730
00:34:12,880 --> 00:34:16,540
and the chunk servers store these chunks

731
00:34:16,540 --> 00:34:19,060
each chunk in a separate Linux file on

732
00:34:19,060 --> 00:34:21,340
their hard drive in a ordinary Linux

733
00:34:21,340 --> 00:34:24,699
file system and presumably the chunk

734
00:34:24,699 --> 00:34:26,800
files are just named by the handle so

735
00:34:26,800 --> 00:34:28,659
all the chunk server has to do is go

736
00:34:28,659 --> 00:34:31,210
find the file with the right name you

737
00:34:31,210 --> 00:34:33,449
know I'll give it that

738
00:34:33,449 --> 00:34:35,560
entire chunk and then just read the

739
00:34:35,560 --> 00:34:38,130
desired range of bytes out of that file

740
00:34:38,130 --> 00:34:46,570
and return the data to the client I hate

741
00:34:46,570 --> 00:34:51,909
question about how reads operate can I

742
00:34:51,909 --> 00:34:54,370
repeat number one the step one is the

743
00:34:54,370 --> 00:34:57,880
application wants to read it a

744
00:34:57,880 --> 00:35:00,040
particular file at a particular offset

745
00:35:00,040 --> 00:35:02,890
within the file a particular range of

746
00:35:02,890 --> 00:35:04,420
bytes in the files and one thousand two

747
00:35:04,420 --> 00:35:05,830
two thousand and so it just sends a name

748
00:35:05,830 --> 00:35:09,010
of the file and the beginning of the

749
00:35:09,010 --> 00:35:12,160
byte range to the master and then the

750
00:35:12,160 --> 00:35:14,050
master looks a file name and it's file

751
00:35:14,050 --> 00:35:18,610
table to find the chunk that contains

752
00:35:18,610 --> 00:35:23,820
that byte range for that file so good

753
00:35:30,980 --> 00:35:34,119
[Music]

754
00:35:34,150 --> 00:35:36,500
so I don't know the exact details my

755
00:35:36,500 --> 00:35:38,200
impression is that the if the

756
00:35:38,200 --> 00:35:40,309
application wants to read more than 64

757
00:35:40,309 --> 00:35:42,319
megabytes or even just two bytes but

758
00:35:42,319 --> 00:35:44,779
spanning a chunk boundary that the

759
00:35:44,779 --> 00:35:47,869
library so the applications linked with

760
00:35:47,869 --> 00:35:52,099
a library that sends our pcs to the

761
00:35:52,099 --> 00:35:54,230
various servers and that library would

762
00:35:54,230 --> 00:35:56,690
notice that the reads spanned a chunk

763
00:35:56,690 --> 00:35:58,490
boundary and break it into two separate

764
00:35:58,490 --> 00:36:01,039
reads and maybe talk to the master I

765
00:36:01,039 --> 00:36:02,480
mean it may be that you could talk to

766
00:36:02,480 --> 00:36:04,069
the master once and get two results or

767
00:36:04,069 --> 00:36:06,710
something but logically at least it two

768
00:36:06,710 --> 00:36:08,269
requests to the master and then requests

769
00:36:08,269 --> 00:36:19,609
to two different chunk servers yes well

770
00:36:19,609 --> 00:36:21,650
at least initially the client doesn't

771
00:36:21,650 --> 00:36:26,829
know for a given file

772
00:36:26,829 --> 00:36:35,990
what chunks need what chunks well it can

773
00:36:35,990 --> 00:36:37,720
calculate it needs the seventeenth chunk

774
00:36:37,720 --> 00:36:40,130
but but then it needs to know what chunk

775
00:36:40,130 --> 00:36:42,109
server holds the seventeenth chunk of

776
00:36:42,109 --> 00:36:44,839
that file and for that it certainly

777
00:36:44,839 --> 00:36:47,599
needs for that it needs to talk to the

778
00:36:47,599 --> 00:36:58,490
master okay so all right did I'm not

779
00:36:58,490 --> 00:36:59,839
going to make a strong claim about which

780
00:36:59,839 --> 00:37:01,130
of them decides that it was the

781
00:37:01,130 --> 00:37:03,170
seventeenth chunk in the file but it's

782
00:37:03,170 --> 00:37:06,380
the master that finds the identifier of

783
00:37:06,380 --> 00:37:07,849
the handle of the seventeenth chunk in

784
00:37:07,849 --> 00:37:09,950
the file looks that up in its table and

785
00:37:09,950 --> 00:37:12,589
figures out which chunk servers hold

786
00:37:12,589 --> 00:37:17,349
that chunk yes

787
00:37:25,609 --> 00:37:35,480
how does that or you mean if the if the

788
00:37:35,480 --> 00:37:38,010
client asks for a range of bytes that

789
00:37:38,010 --> 00:37:46,400
spans a chunk boundary yeah so the the

790
00:37:46,400 --> 00:37:49,049
well you know the client will ask that

791
00:37:49,049 --> 00:37:50,490
well the clients linked with this

792
00:37:50,490 --> 00:37:52,950
library is a GFS library that noticed

793
00:37:52,950 --> 00:37:56,190
how to take read requests apart and put

794
00:37:56,190 --> 00:38:00,270
them back together and so that library

795
00:38:00,270 --> 00:38:01,290
would talk to the master and the master

796
00:38:01,290 --> 00:38:02,910
would tell it well well you know chunk

797
00:38:02,910 --> 00:38:05,130
seven is on this server and chunk eight

798
00:38:05,130 --> 00:38:07,589
is on that server and then why the

799
00:38:07,589 --> 00:38:09,270
library would just be able to say oh you

800
00:38:09,270 --> 00:38:10,859
know I need the last couple bites of

801
00:38:10,859 --> 00:38:12,240
chunk seven and the first couple bites

802
00:38:12,240 --> 00:38:15,420
of chunk eight and then would fetch

803
00:38:15,420 --> 00:38:17,819
those put them together in a buffer and

804
00:38:17,819 --> 00:38:21,980
return them to the calling application

805
00:38:26,030 --> 00:38:28,530
well the master tells it about chunks

806
00:38:28,530 --> 00:38:30,900
and the library kind of figures out

807
00:38:30,900 --> 00:38:32,700
where it should look in a given chunk to

808
00:38:32,700 --> 00:38:34,950
find the date of the application wanted

809
00:38:34,950 --> 00:38:36,240
the application only thinks in terms of

810
00:38:36,240 --> 00:38:38,609
file names and sort of just offsets in

811
00:38:38,609 --> 00:38:41,280
the entire file in the library and the

812
00:38:41,280 --> 00:38:45,200
master conspire to turn that into chunks

813
00:38:45,500 --> 00:38:48,500
yeah

814
00:38:50,349 --> 00:38:55,400
sorry let me get closer here you say

815
00:38:55,400 --> 00:39:03,289
again so the question is does it matter

816
00:39:03,289 --> 00:39:06,109
which chunk server you read from so you

817
00:39:06,109 --> 00:39:08,929
know yes and no notionally they're all

818
00:39:08,929 --> 00:39:13,039
supposed to be replicas in fact as you

819
00:39:13,039 --> 00:39:14,869
may have noticed or as we'll talk about

820
00:39:14,869 --> 00:39:17,209
they're not you know they're not

821
00:39:17,209 --> 00:39:20,689
necessarily identical and applications

822
00:39:20,689 --> 00:39:21,979
are supposed to be able to tolerate this

823
00:39:21,979 --> 00:39:23,779
but the fact is that you make a slightly

824
00:39:23,779 --> 00:39:24,829
different data depending on which

825
00:39:24,829 --> 00:39:28,999
replicas you read yeah so the paper says

826
00:39:28,999 --> 00:39:32,420
that clients try to read from the chunk

827
00:39:32,420 --> 00:39:34,699
server that's in the same rack or on the

828
00:39:34,699 --> 00:39:44,749
same switch or something all right so

829
00:39:44,749 --> 00:39:47,229
that's reads

830
00:39:48,859 --> 00:39:51,420
the writes are more complex and

831
00:39:51,420 --> 00:40:02,880
interesting now the application

832
00:40:02,880 --> 00:40:04,410
interface for writes is pretty similar

833
00:40:04,410 --> 00:40:06,030
there's just some call some library you

834
00:40:06,030 --> 00:40:08,910
call to make you make to the gfs client

835
00:40:08,910 --> 00:40:10,230
library saying look here's a file name

836
00:40:10,230 --> 00:40:12,540
and a range of bytes I'd like to write

837
00:40:12,540 --> 00:40:14,339
and the buffer of data that I'd like you

838
00:40:14,339 --> 00:40:17,609
to write to that that range actually let

839
00:40:17,609 --> 00:40:19,530
me let me backpedal I only want to talk

840
00:40:19,530 --> 00:40:23,099
about record appends and so I'm going to

841
00:40:23,099 --> 00:40:26,339
praise this the client interface as the

842
00:40:26,339 --> 00:40:28,200
client makes a library call that says

843
00:40:28,200 --> 00:40:29,940
here's a file name and I'd like to

844
00:40:29,940 --> 00:40:32,069
append this buffer of bytes to the file

845
00:40:32,069 --> 00:40:35,099
I said this is the record appends that

846
00:40:35,099 --> 00:40:42,900
the paper talks about so again the

847
00:40:42,900 --> 00:40:47,579
client asks the master look I want to

848
00:40:47,579 --> 00:40:49,680
append sends a master requesting what I

849
00:40:49,680 --> 00:40:51,240
would like to append this named file

850
00:40:51,240 --> 00:40:55,140
please tell me where to look for the

851
00:40:55,140 --> 00:40:56,790
last chunk in the file because the

852
00:40:56,790 --> 00:40:58,619
client may not know how long the file is

853
00:40:58,619 --> 00:41:00,329
if lots of clients are appending the

854
00:41:00,329 --> 00:41:06,900

same file because we have some big file this logging stuff from a lot of different clients may be you know 

857
00:41:06,900 --> 00:41:08,369
没有client必须会知道 文件有多长 因此（也不会知道）增加在哪个offset或者chunk上
no client will necessarily know how long the file is and therefore which offset or which chunk it should be appending to

860
00:41:12,270 --> 00:41:14,280
你可以问master
so you can ask the master 

861
00:41:14,280 --> 00:41:22,550
请告诉我 
please tell me about the the server's that hold the very last chunk current chunk in this file

864
00:41:22,550 --> 00:41:26,040
不幸的 现在写 如果你在读
so unfortunately now the writing if you're

865
00:41:26,040 --> 00:41:27,569
你可以从任何最新的复制读取
reading you can read from any up-to-date replica 
-
866
00:41:27,569 --> 00:41:30,060
对于写 需要有一个primary
for writing though there needs to be a primary 

867
00:41:30,060 --> 00:41:37,710
因此，此时文件上的primary可能已经指定，也可能没有
so at this point on the file may or may not have a primary already designated by the master

870
00:41:37,710 --> 00:41:39,180
所以我们需要考虑
so we need to consider the case of

871
00:41:39,180 --> 00:41:40,980
如果还没有primary
if there's no primary already 

872
00:41:40,980 --> 00:41:49,560
而且master所知的 好吧 没有primary
and all the master knows well there's no primary so

873
00:41:49,560 --> 00:41:53,119
一个情况是没有primary
so one case is no primary

874
00:41:57,599 --> 00:42:06,339
在这种情况下，主服务器需要找出具有最新块副本的块服务器集
in that case the master needs to find out the set of chunk servers that have the most up-to-date copy of the chunk

877
00:42:06,339 --> 00:42:10,660
因为您知道您是否已经运行了很长时间
because you know if you've been running the system for a long time 

879
00:42:10,660 --> 00:42:11,800
由于故障或其他原因
due to failures or whatever 

880
00:42:11,800 --> 00:42:15,579
可能有块服务器在昨天或上周知道您有块的旧副本
there may be chunk servers out there that have old copies of the chunk from you know yesterday or last week 

882
00:42:15,579 --> 00:42:17,950
我一直保持最新
that I've been kept up to kept up to date 

883
00:42:17,950 --> 00:42:21,819
因为可能该服务器已停运了两天并且没有收到更新
because maybe that server was dead for a couple days and wasn't receiving updates 

885
00:42:21,819 --> 00:42:27,190
因此，您需要能够分辨出最新的数据块副本与非最新的副本之间的区别
so there's you need to be able to tell the difference between up-to-date copies of the chunk and non up-to-date 

888
00:42:27,190 --> 00:42:33,569
所以第一步是要找到
so the first step is to find

889
00:42:33,569 --> 00:42:37,510
你知道找到最新的
you know find up-to-date 

890
00:42:37,510 --> 00:42:41,319
这一切都发生在主人身上
this is all happening in the master

891
00:42:41,319 --> 00:42:42,790
因为客户要求主人
because the client has asked the master 

892
00:42:42,790 --> 00:42:44,260
告诉师傅我要上传此文件
told the master look I want up append this file

893
00:42:44,260 --> 00:42:46,180
请告诉我要与哪些块服务器对话
please tell me what chunk servers to talk to

894
00:42:46,180 --> 00:42:50,680
所以主服务器的一部分试图弄清楚客户端应该与哪些服务器通信
so a part of the master trying to figure out what chunk servers the client should talk to

897
00:42:50,680 --> 00:42:52,950
所以当我们最终找到最新的副本时
so when we finally find up-to-date replicas 

898
00:42:52,950 --> 00:42:59,770
而更新意味着
and what update means is 

899
00:42:59,770 --> 00:43:02,260
副本的块版本为
a replica whose version of the chunk is

900
00:43:02,260 --> 00:43:04,720
等于版本号
equal to the version number that the

901
00:43:04,720 --> 00:43:06,730
master knows is the most up-to-date version number

902
00:43:06,730 --> 00:43:10,630
主人知道是最新的版本号
so the master that hands out these version numbers

904
00:43:10,630 --> 00:43:14,740
师父记得
the master remembers that 

905
00:43:14,740 --> 00:43:18,460
哦，对于这个特定的块，你知道
oh for this particular chunk you know 

906
00:43:18,460 --> 00:43:23,550
仅当主干服务器的版本号为17时，它才是最新的，这就是为什么它必须非易失性存储在磁盘上的原因
the trunk server is only up to date if it has version number 17 and this is why it has to be non-volatile stored on disk

909
00:43:23,550 --> 00:43:26,560
因为如果它在一次坠毁中丢失
because if if it was lost in a crash 

910
00:43:26,560 --> 00:43:31,000
并且有块服务器保存过时的块副本
and there were chunk servers holding stale copies of chunks

911
00:43:31,000 --> 00:43:35,140
主人将无法区分块
the master wouldn't be able to distinguish between chunk

913
00:43:35,140 --> 00:43:36,819
服务器持有上周的旧数据块副本
servers holding stale copies of a chunk from last week 

914
00:43:36,819 --> 00:43:39,310
和一个大块服务器
and a chunk server that

915
00:43:39,310 --> 00:43:44,440
保存崩溃时最新的块的副本
holds the copy of the chunk that was up-to-date as of the crash 

917
00:43:44,440 --> 00:43:49,470
这就是为什么主服务器记住磁盘上的版本号的原因
that's why the master remembers the version number on disk yeah

919
00:43:54,450 --> 00:43:59,970
如果您知道您正在与所有块服务器通信
if you knew you were talking to all the chunk servers 

921
00:43:59,970 --> 00:44:04,660
因此观察到，如果主机重启，主服务器无论如何都要与块服务器进行通信
so the observation is the master has to talk to the chunk servers anyway if it reboots 

923
00:44:04,660 --> 00:44:06,280
为了找到哪个块服务器持有哪个块
in order to find which chunk server holds which chunk 

924
00:44:06,280 --> 00:44:08,890
因为师父不记得了
because the master doesn't remember that 

925
00:44:08,890 --> 00:44:12,150
所以你可能会认为
so you might think that

926
00:44:12,150 --> 00:44:14,380
你可以把最大的
you could just take the maximum you

927
00:44:14,380 --> 00:44:15,579
可以和块服务器对话
could just talk to the chunk servers

928
00:44:15,579 --> 00:44:17,079
找出他们拥有哪些中继和版本
find out what trunks and versions they hold 

929
00:44:17,079 --> 00:44:20,619
并在给定的整体上获取最大值
and take the maximum for a given chunk overall the responding chunk servers

931
00:44:20,619 --> 00:44:24,579
如果所有持有块的块服务器都响应，那将起作用
and that would work if all the chunk servers holding a chunk responded

933
00:44:24,579 --> 00:44:26,920
但风险是
but the risk is that 

934
00:44:26,920 --> 00:44:28,480
主机重启时
at the time the master reboots 

935
00:44:28,480 --> 00:44:30,400
也许一些块服务器脱机或断开连接，或者
maybe some of the chunk servers are offline or disconnected or

936
00:44:30,400 --> 00:44:32,770
无论他们自己重新启动并且不响应
whatever themselves rebooting and don't respond

937
00:44:32,770 --> 00:44:35,349
所以所有的师父都回来了
and so all the master gets back

938
00:44:35,349 --> 00:44:40,119
是具有上周块副本的块服务器的响应
is responses from chunk servers that have last week's copies of the block 

940
00:44:40,119 --> 00:44:44,320
并且具有当前副本的块服务器尚未完成重新引导或脱机或其他操作
and the chunk servers that have the current copy haven't finished rebooting or offline or something

942
00:44:44,320 --> 00:44:54,940
好吧，哦，如果
so ok oh yes if 

943
00:44:54,940 --> 00:44:59,859
如果服务器保存的最新副本永久失效
if the server's holding the most recent copy are permanently dead 

945
00:44:59,859 --> 00:45:06,540
如果您丢失了所有副本的所有最新版本，则可以
if you've lost all copies all of the most recent version of a chunk then yes

947
00:45:09,030 --> 00:45:11,130
没有
No

948
00:45:11,130 --> 00:45:15,339
好吧，问题是
okay so the question is 

949
00:45:15,339 --> 00:45:18,550
主人知道这个块正在寻找版本17
the master knows that for this chunk is looking for version 17

951
00:45:18,550 --> 00:45:21,579
假设它找不到您知道的块服务器
supposing it finds no chunk server you know

952
00:45:21,579 --> 00:45:25,780
并定期与块服务器进行对话，以询问他们您拥有哪些块，您拥有什么版本
and it talks to the chunk servers periodically to sort of ask them what chunks do you have what versions you have 

955
00:45:25,780 --> 00:45:30,369
假设它没有为此块找到版本17为17的服务器
supposing it finds no server with chunk 17 with version 17 for this this chunk 

957
00:45:30,369 --> 00:45:32,800
师父会说
then the master will either say

958
00:45:32,800 --> 00:45:35,710
好吧，要么还没有回应，然后等待，要么
well either not respond yet and wait or

959
00:45:35,710 --> 00:45:42,880
它将告诉客户外观我无法回答，请稍后再试
it will tell the client look I can't answer that try again later 

961
00:45:42,880 --> 00:45:47,079
就像建筑物中的电源故障并且所有服务器都崩溃了一样，我们正在缓慢地重新启动
and this would come up like there was a power failure in the building and all the server's crashed and we're slowly rebooting 

964
00:45:47,079 --> 00:45:49,510
主人可能先来
the master might come up first

965
00:45:49,510 --> 00:45:53,079
而且您知道部分服务器可能已启动
and you know some fraction of the chunk servers might be up 

967
00:45:53,079 --> 00:45:57,609
其他的会从现在起五分钟后重启
and other ones would reboot five minutes from now but

968
00:45:57,609 --> 00:45:59,890
所以我们必须准备等待
so we have to be prepared to wait 

969
00:45:59,890 --> 00:46:05,440
它将永远等待，因为您不想使用该块的陈旧版本
and it will wait forever because you don't want to use a stale version of that of a chunk

971
00:46:05,440 --> 00:46:12,910
好的，所以主服务器需要汇编具有最新版本的块服务器列表
okay so the master needs to assemble the list of chunk servers that have the most recent version 

974
00:46:12,910 --> 00:46:14,619
主机知道磁盘上存储的最新版本
the master knows the most recent versions stored on disk

975
00:46:14,619 --> 00:46:16,540
每个块服务器以及每个块
each chunk server along with each chunk

976
00:46:16,540 --> 00:46:19,810
正如您所指出的，还记得它存储的块的版本号
as you pointed out also remembers the version number of the chunk that it's stores 

978
00:46:19,810 --> 00:46:25,690
这样，当大块服务器向主报告说我有这个大块时
so that when chunk servers reported into the master saying look I have this chunk 

981
00:46:25,690 --> 00:46:27,760
主人可以忽略那些版本不匹配的
the master can ignore the ones whose version does not match

982
00:46:27,760 --> 00:46:30,339
主人知道的版本是最新的
the version the master knows is the most recent

983
00:46:30,339 --> 00:46:36,670
好的，所以请记住我们是客户想要附加主服务器的主服务器
okay so remember we were the client want to append the master doesn't have a primary 

985
00:46:36,670 --> 00:46:42,310
它弄清楚也许您必须等待这组块
it figures out maybe you have to wait for the set of chunk

987
00:46:42,310 --> 00:46:49,020
具有该块的最新版本的服务器会选择一个主服务器
servers that have the most recent version of that chunk it picks a primary

989
00:46:50,040 --> 00:46:56,859
所以我要选择其中一个作为主服务器，其他选择作为辅助服务器
so I'm gonna pick one of them to be the primary and the others to be secondary servers

992
00:46:56,859 --> 00:47:02,140
在最新版本中设置的副本中
among the replicas set at the most recent version 

994
00:47:02,140 --> 00:47:11,170
然后，主机将版本号递增并将其写入磁盘
the master then increments the version number and writes that to disk 

996
00:47:11,170 --> 00:47:13,600
所以它不会忘记崩溃
so it doesn't forget it the crashes

997
00:47:13,600 --> 00:47:15,970
然后它将主数据库发送到
and then it sends the primary in the

998
00:47:15,970 --> 00:47:20,710
中学，这是他们每个人都说
secondaries and that's each of them a message saying 

1000
00:47:20,710 --> 00:47:22,840
寻找这个块这是主要的这是次要的
look for this chunk here's the primary here's the secondaries 

1001
00:47:22,840 --> 00:47:28,450
您知道收件人可能是其中之一，这是新版本号
you know recipient maybe one of them and here's the new version number

1003
00:47:28,450 --> 00:47:39,490
因此，它会告诉主次要人员此信息以及版本号
so then it tells primary secondaries this information plus the version number 

1006
00:47:39,490 --> 00:47:41,920
主节点和辅助节点都将版本号写入磁盘
the primaries and secondaries all write the version number to disk

1008
00:47:41,920 --> 00:47:43,780
他们不会忘记，因为你知道
so they don't forget because you know 

1009
00:47:43,780 --> 00:47:45,040
如果有电源故障或其他任何原因
if there's a power failure or whatever 

1010
00:47:45,040 --> 00:47:51,210
他们必须使用他们持有的实际版本号向主报告
they have to report in to the master with the actual version number they hold yes

1012
00:48:04,230 --> 00:48:06,190
这是一个很好的问题
that's a great question

1013
00:48:06,190 --> 00:48:08,500
所以我不知道
so I don't know 

1014
00:48:08,500 --> 00:48:11,170
这篇文章中暗示我对此略有错误
there's hints in the paper that I'm slightly wrong about this

1015
00:48:11,170 --> 00:48:16,030
所以报纸说我认为你的问题正在向我解释有关报纸的一些事情
so the paper says I think your question was explaining something to me about the paper 

1017
00:48:16,030 --> 00:48:22,480
该论文说，如果主服务器重启并与块服务器进行对话
the paper says if the master reboots and talks to chunk servers

1019
00:48:22,480 --> 00:48:28,540
并且其中一个块服务器重新引导时报告的版本号高于主服务器记住的版本号
and one of the chunk servers reboot reports a version number that's higher than the version number the master remembers

1022
00:48:28,540 --> 00:48:31,600
船长认为发生了故障
the master assumes that there was a failure

1023
00:48:31,600 --> 00:48:34,600
当它分配一个新的主要和
while it was assigning a new primary and

1024
00:48:34,600 --> 00:48:38,860
采用新的从块服务器听到的更高版本号
adopts the new the higher version number that it heard from a chunk server 

1026
00:48:38,860 --> 00:48:42,250
所以一定是这样
so it must be the case that 

1027
00:48:42,250 --> 00:48:48,010
为了处理此时的主崩溃，
in order to handle a master crash at this point that 

1028
00:48:48,010 --> 00:49:02,530
主服务器在告诉了主节点后将其自己的版本号写入磁盘
the master writes its own version number to disk after telling the primaries 

1030
00:49:02,530 --> 00:49:03,550
但是这里有一个问题，因为如果
there's a bit of a problem here though because if the

1031
00:49:03,550 --> 00:49:11,880
那有什么ACK
what is that is there an ACK

1032
00:49:12,410 --> 00:49:17,250
好吧，也许主人告诉
all right so maybe the master tells the

1033
00:49:17,250 --> 00:49:20,400
主要和备份，以及它们的主要和次要
primaries and backups and that their primaries and secondaries 

1035
00:49:20,400 --> 00:49:21,720
如果他们的主要中学告诉他新版本号
if their primary secondary tells him the new version number

1036
00:49:21,720 --> 00:49:27,870
等待ACK，然后写入磁盘或对此不满意的东西
waits for the ACK and then writes to disk or something unsatisfying about this 

1038
00:49:27,870 --> 00:49:37,770
我不认为这行得通
I don't believe that works

1039
00:49:37,770 --> 00:49:40,380
因为这种可能性
because of the possibility that the

1040
00:49:40,380 --> 00:49:46,650
主服务器重启时，最新版本号处于离线状态的大块服务器
chunk servers with the most recent version numbers being offline at the time the master reboots 

1043
00:49:46,650 --> 00:49:50,610
我们不希望母版母版不知道当前版本号
we wouldn't want the master the master doesn't know the current version number 

1045
00:49:50,610 --> 00:49:54,300
它只会接受遵循的最高版本号，这可能是旧版本号
it'll just accept whatever highest version number adheres which could be an old version number 

1047
00:49:54,300 --> 00:49:57,000
好吧，这是我无知的一个领域
all right so this is a an area of my ignorance

1048
00:49:57,000 --> 00:49:58,260
我不太明白
I don't really understand

1049
00:49:58,260 --> 00:50:03,600
主服务器是否首先更新其自己的版本号，然后告诉主辅助服务器或其他方法
whether the master update its own version number on this first and then tells the primary secondary or the other way around 

1052
00:50:03,600 --> 00:50:06,360
我不确定这两种方式都可以
and I'm not sure it works either way 

1053
00:50:06,360 --> 00:50:11,340
可以，但无论如何都可以
okay but in any case one way or another 

1054
00:50:11,340 --> 00:50:12,810
主机更新其版本号
the master update its version number 

1055
00:50:12,810 --> 00:50:14,340
告诉小学中学
tells the primary secondary 

1056
00:50:14,340 --> 00:50:16,140
看看您的主要和次要这是一个新版本号
look your primaries and secondaries here's a new version number

1057
00:50:16,140 --> 00:50:19,410
所以现在我们有了一个可以接受写入的主数据库
and so now we have a primary which is able to accept writes

1059
00:50:19,410 --> 00:50:23,730
这就是主要工作是要从客户端和
that's what the primaries job is to take writes from clients and

1061
00:50:23,730 --> 00:50:35,130
组织将这些写入应用到各个块服务器
organize applying those writes to the various chunk servers 

1063
00:50:35,130 --> 00:50:36,450
而且您知道版本号的原因是
and you know the reason for the version number stuff is

1064
00:50:36,450 --> 00:50:44,270
这样主人就能认出
so that the master will recognize the

1065
00:50:44,420 --> 00:50:49,940
哪些服务器具有此新功能，您知道
which servers have this new you know the

1066
00:50:50,240 --> 00:50:55,320
大师向某些块服务器发出成为主要角色的能力
master hands out the ability to be primary for some chunk server 

1068
00:50:55,320 --> 00:50:58,950
我们希望能够识别
we want to be able to recognize 

1069
00:50:58,950 --> 00:51:01,260
如果主机崩溃，那你知道那是主要的
if the master crashes you know that it was that was the primary 

1070
00:51:01,260 --> 00:51:05,070
只有那个主要的和实际处理过的次要的
that only that primary and it secondaries which were actually processed

1072
00:51:05,070 --> 00:51:08,250
负责更新该块
which were in charge of updating that chunk 

1074
00:51:08,250 --> 00:51:12,630
将来只允许那些主副本和次副本成为块服务器
that only those primaries and secondaries are allowed to be chunk servers in the future 

1076
00:51:12,630 --> 00:51:17,270
主机执行此操作的方式是使用此版本号逻辑
and the way the master does this is with this version number logic

1078
00:51:17,480 --> 00:51:21,500
好吧，师父告诉小学和中学
okay so the master tells the primaries and secondaries

1079
00:51:21,500 --> 00:51:24,740
在那里他们被允许修改此块
that there it they're allowed to modify this block 

1081
00:51:24,740 --> 00:51:29,390
它也为主要客户提供了租约，这基本上告诉了主要客户
it also gives the primary a lease which basically tells the primary 

1083
00:51:29,390 --> 00:51:31,099
看起来在接下来的60秒内您将是主要的
look you're allowed to be primary for the next sixty seconds 

1084
00:51:31,099 --> 00:51:33,200
六十秒后，你必须停止
after sixty Seconds you have to stop 

1085
00:51:33,200 --> 00:51:39,290
这是确保我们不会以两个原语结束的机制的一部分
and this is part of the machinery for making sure that we don't end up with two primaries

1087
00:51:39,290 --> 00:51:41,869
我待会再谈
I'll talk about a bit later 

1088
00:51:41,869 --> 00:51:46,339
好吧，现在我们是主要的
okay so now we were primary 

1089
00:51:46,339 --> 00:51:50,089
现在主人告诉客户
now the master tells the client 

1090
00:51:50,089 --> 00:51:54,440
谁是小学和中学
who the primary and the secondaries are 

1091
00:51:54,440 --> 00:51:59,050
至此，我们正在执行
and at this point we're we're executing in

1092
00:51:59,050 --> 00:52:02,240
图二
figure two in the paper 

1093
00:52:02,240 --> 00:52:04,040
客户现在知道谁是主要中学
the client now knows who the primary secondaries are 

1094
00:52:04,040 --> 00:52:08,180
以某种顺序或另一种顺序，本文解释了一种管理此问题的聪明方法
in some order or another and the paper explains a sort of clever way to manage this

1096
00:52:08,180 --> 00:52:10,849
以某种顺序
in some order or another 

1097
00:52:10,849 --> 00:52:15,230
客户端将要添加到所有辅助数据库的数据副本发送给该数据库
the client sends a copy of the data it wants to be appended to the primary in all the secondaries 

1099
00:52:15,230 --> 00:52:22,099
并且辅助数据库中的主数据库将该数据写入临时位置
and the primary in the secondaries write that data to a temporary location 

1102
00:52:22,099 --> 00:52:24,380
它尚未附加到文件中
it's not appended to the file yet 

1103
00:52:24,380 --> 00:52:29,180
after they've all said yes we have the data 

1104
00:52:29,180 --> 00:52:31,130
他们都说了之后，我们就有了数据
the client sends a message to the primary saying look 

1105
00:52:31,130 --> 00:52:36,579
您知道您和所有辅助节点都有我要附加到此文件的数据
you know you and all the secondaries have the data I'd like to append it for this file

1108
00:52:36,579 --> 00:52:40,520
主要可能是同时从许多不同的客户端接收这些请求
the primary maybe is receiving these requests from lots of different clients concurrently

1110
00:52:40,520 --> 00:52:45,260
它选择一些命令一次执行一个客户请求
it picks some order execute the client request one at a time 

1112
00:52:45,260 --> 00:52:48,260
并为每个客户追加请求
and for each client appends request 

1113
00:52:48,260 --> 00:52:53,030
主要对象查看文件末尾的偏移量，即当前块的当前末尾
the primary looks at the offset that's the end of the file the current end of the current chunk 

1115
00:52:53,030 --> 00:52:56,480
确保块中有足够的剩余空间，
makes sure there's enough remaining space in the chunk and 

1117
00:52:56,480 --> 00:53:02,240
然后告诉然后将客户记录写入当前块的末尾
then tells then writes the clients record to the end of the current chunk 

1119
00:53:02,240 --> 00:53:12,010
并告诉所有第二服务器也将客户端数据写到末尾的相同偏移量中，它们的块中相同偏移量
and tells all the secondaries to also write the clients data to the end to the same offset the same offset in their chunks

1122
00:53:12,010 --> 00:53:20,500
好吧，所以主选一个偏移量
all right so the primary picks an offset

1123
00:53:20,500 --> 00:53:26,480
所有副本，包括主副本
all the replicas including the primary

1124
00:53:26,480 --> 00:53:36,090
被告知在偏移处写入新的附加记录
are told to write the new appended record at at offset 

1126
00:53:36,090 --> 00:53:38,700
中学的他们可能会做，他们可能不会
the secondary's they may do it they may not

1127
00:53:38,700 --> 00:53:45,480
这样做我要么空间不足，要么它们崩溃了，或者网络消息从主数据库丢失了
do it I'm either run out of space maybe they crashed maybe the network message was lost from the primary 

1130
00:53:45,480 --> 00:53:50,760
因此，如果辅助节点实际以该偏移量将数据写入其磁盘
so if a secondary actually wrote the data to its disk at that offset 

1132
00:53:50,760 --> 00:53:52,859
它将回答主要
it will reply yes to the primary 

1133
00:53:52,859 --> 00:53:57,740
如果主要从所有次要收集到是的答案
if the primary collects a yes answer from all of the secondaries

1134
00:53:58,520 --> 00:54:08,250
因此，如果他们所有人都设法写出并回复主要的说法，是的，我做到了
so if they all of all of them managed to actually write and reply to the primary saying yes I did it 

1137
00:54:08,250 --> 00:54:10,800
那么主服务器将向客户端回复回复成功
then the primary is going to reply reply success to the client

1138
00:54:10,800 --> 00:54:21,510
如果主要学生没有从其中一个中学获得答案
if the primary doesn't get an answer from one of the secondaries 

1140
00:54:21,510 --> 00:54:28,980
或辅助回复对不起，发生了一些不好的事情我磁盘空间不足我的磁盘我不知道
or the secondary reply sorry something bad happened I ran out of disk space my disk I don't know what 

1143
00:54:28,980 --> 00:54:37,950
然后主要回复客户
then the primary replies no to the client 

1144
00:54:37,950 --> 00:54:42,000
论文说，哦，如果客户在主数据库中遇到这样的错误
and the paper says oh if the client gets an error like that back in the primary 

1146
00:54:42,000 --> 00:54:46,020
客户应该重新发出整个追加序列
the client is supposed to reissue the entire append sequence starting again 

1148
00:54:46,020 --> 00:54:50,369
与主人交谈以找出文件末尾的油脂最多
talking to the master to find out the most grease the chunk at the end of the file

1150
00:54:50,369 --> 00:54:54,300
我想知道客户端应该重新发出整个记录追加操作
I want to know the client supposed to reissue the whole record append operation

1152
00:54:54,300 --> 00:55:01,650
啊，你会想，但他们不
ah you would think but they don't 

1153
00:55:01,650 --> 00:55:05,180
所以问题是你知道
so the question is jeez you know

1154
00:55:05,180 --> 00:55:08,220
主服务器告诉所有副本执行附加操作
the the primary tells all the replicas to do the append

1155
00:55:08,220 --> 00:55:10,830
是的，也许其中一些人做的有些不对
yeah maybe some of them do some of them don't right 

1157
00:55:10,830 --> 00:55:14,460
如果其中一些不这样做，那么我们会向客户端应用错误
if some of them don't then we apply an error to the client 

1159
00:55:14,460 --> 00:55:16,109
因此客户认为追加发生
so the client thinks of the append in happen

1160
00:55:16,109 --> 00:55:23,550
但是附加成功的其他副本却附加了
but those other replicas where the append succeeded they did append 

1162
00:55:23,550 --> 00:55:25,400
所以现在我们有副本供体相同的数据
so now we have replicas donor the same data

1163
00:55:25,400 --> 00:55:31,830
其中之一错误返回的那个没有执行追加
one of them the one that returned in error didn't do the append 

1164
00:55:27,480 --> 00:55:28,890
他们返回的是，确实做了追加
and the ones they returned yes did do the append 

1166
00:55:31,830 --> 00:55:35,119
这就是GFS运作的方式
so that is just the way GFS works

1167
00:55:44,590 --> 00:55:47,590
是的，如果读者随后读取了此文件
yeah so if a reader then reads this file

1168
00:55:47,590 --> 00:55:50,330
他们取决于他们是什么副本
they depending on what replica they be

1169
00:55:50,330 --> 00:55:53,360
他们可能会看到附加的记录，或者可能看不到
they may either see the appended record or they may not 

1170
00:55:53,360 --> 00:55:56,810
如果记录追加失败
if the record append failed

1171
00:55:56,810 --> 00:55:59,120
但是如果记录追加成功
but if the record append succeeded 

1172
00:55:59,120 --> 00:56:00,920
如果客户收到成功消息
if the client got a success message back

1173
00:56:00,920 --> 00:56:05,420
那么这意味着所有复制品都以相同的偏移量附加了该记录
then that means all of the replicas appended that record at the same offset

1175
00:56:05,420 --> 00:56:10,160
如果客户没有得到回报
if the client gets a no back 

1176
00:56:10,160 --> 00:56:15,740
那么零个或多个副本可能已经附加了该偏移量的记录，而其他副本则没有
then zero or more of the replicas may have appended the record of that offset and the other ones not

1178
00:56:15,740 --> 00:56:20,240
所以客户得到了否
so the client got a No

1179
00:56:20,240 --> 00:56:25,130
那么这意味着有些副本也许有些副本有记录，有些则没有
then that means that some replicas maybe some replicas have the record and some don't 

1181
00:56:25,130 --> 00:56:32,980
所以你从你身上认真读过的东西知道你可能会或可能不会看到记录是的
so what you which were oughly read from you know you may or may not see the record yeah

1184
00:56:39,410 --> 00:56:45,319
哦，所有副本都是一样的
oh that all the replicas are the same

1185
00:56:45,319 --> 00:56:47,240
所有辅助文件都具有相同的版本号
all the secondaries are the same version number 

1186
00:56:47,240 --> 00:56:51,500
因此版本号仅在主服务器分配新的时才更改
so the version number only changes when the master assigns a new

1188
00:56:51,500 --> 00:56:55,309
通常会发生，并且可能仅在主要故障发生时才会发生
primary which would ordinarily happen and probably only happen if the primary failed 

1190
00:56:55,309 --> 00:56:58,270
所以我们在谈论的是
so what we're talking about is is

1191
00:56:58,270 --> 00:57:00,200
具有新版本号的副本
replicas that have the fresh version number all right 

1192
00:57:00,200 --> 00:57:08,059
从看它们时您无法分辨出它们缺少副本
and you can't tell from looking at them that they're missing that the replicas are different 

1195
00:57:08,059 --> 00:57:09,319
但也许他们不同
but maybe they're different 

1196
00:57:09,319 --> 00:57:11,390
这样做的理由是
and the justification for this is that 

1197
00:57:11,390 --> 00:57:16,099
是的，您知道副本可能并不都具有附加记录
yeah you know maybe the replicas don't all have that the appended record 

1199
00:57:16,099 --> 00:57:22,940
但是在这种情况下，主要的回答是“否”，并且客户端知道写入失败
but that's the case in which the primary answer no to the clients and the client knows that the write failed 

1202
00:57:22,940 --> 00:57:27,859
而其背后的原因是，客户端库将重新发布该附录
and the reasoning behind this is that then the client ibrary will reissue the append 

1204
00:57:27,859 --> 00:57:33,260
这样附加的记录就会显示出来，您知道最终附加会成功
so the appended record will show up you know eventually the append succeed you would think 

1206
00:57:33,260 --> 00:57:38,480
因为客户端，我会继续发行直到成功，然后
because the client I'll keep reissuing it until succeeds and then

1208
00:57:38,480 --> 00:57:41,510
当它成功时，这意味着会有一些抵消，您将进一步了解
when it succeeds that means there's gonna be some offset you know farther on

1210
00:57:41,510 --> 00:57:45,859
该记录实际上出现在所有副本中的文件中
in the file where that record actually occurs in all the replicas as well as

1212
00:57:45,859 --> 00:57:52,690
该单词之前的偏移量仅在少数副本中出现
offsets preceding that word only occurs in a few of the replicas yes

1214
00:58:04,680 --> 00:58:11,779
哦，这是一个好问题
oh this is a great question

1215
00:58:11,779 --> 00:58:19,410
对于基础网络而言，正确数据所采用的确切路径可能非常重要
the exact path that the right data takes might be quite important with respect to the underlying network 

1218
00:58:19,410 --> 00:58:22,950
而且某处的报纸说，即使
and the paper somewhere says even though 

1219
00:58:22,950 --> 00:58:24,539
当报纸第一次谈论它时
when the paper first talks about it 

1220
00:58:24,539 --> 00:58:26,490
他声称客户将数据发送到每个副本
he claims that the client sends the data to each replica 

1221
00:58:26,490 --> 00:58:33,539
实际上，稍后它会更改音调，并说客户端将其仅发送到最近的副本
in fact later on it changes the tune and says the client sends it to only the closest of the replicas 

1224
00:58:33,539 --> 00:58:37,829
然后该副本的副本将数据转发到另一个副本
and then the replicas then that replica forwards the data to another replica

1226
00:58:37,829 --> 00:58:39,630
一直到我都被束缚住了
along I sort of chained until all the

1227
00:58:39,630 --> 00:58:43,770
副本具有数据，并且该链的路径用于最小化
replicas had the data and that path of that chain is taken to sort of minimize

1229
00:58:43,770 --> 00:59:00,390
跨越数据中心中的瓶颈内部交换机链接是
crossing a bottleneck inter switch links in a data center yes 

1231
00:59:00,390 --> 00:59:06,119
如果主机认为没有主要版本，则版本号只会递增
the version number only gets incremented if the master thinks there's no primary

1233
00:59:06,119 --> 00:59:13,710
在通常的顺序中，已经有一个主要的
in the ordinary sequence there already be a primary for that chunk the the

1235
00:59:13,710 --> 00:59:19,470
主人会记得哦，天哪，该块已经有一个主要的和次要的，它只是
the the master sort of will remember oh gosh there's already a primary and secondary for that chunk and it'll just

1238
00:59:19,470 --> 00:59:22,079
它不会通过此主选择，不会增加版本号
it won't go through this master selection it won't increment the version number 

1240
00:59:22,079 --> 00:59:29,270
它只会告诉客户端查找，这里是主要版本，没有版本号更改
it'll just tell the client look up here's the primary with with no version number change

1243
00:59:42,340 --> 00:59:47,090
我的理解是，如果这是
my understanding is that if this is this

1244
00:59:47,090 --> 00:59:51,050
我想你是在问一个有趣的问题
I think you're asking a you're asking an interesting question 

1246
00:59:51,050 --> 00:59:54,590
因此，在这种情况下，无法解决主要问题，客户端就会失败
so in this scenario in which the primaries isn't answered failure to the client 

1248
00:59:54,590 --> 00:59:57,860
您可能会认为某事一定有问题，应该在继续进行之前将其修复
you might think something must be wrong with something and that it should be fixed before you proceed 

1250
00:59:57,860 --> 01:00:08,300
事实上，据我所知，客户没有立即尝试重试您知道的追加内容
in fact as far as I can tell the paper there's no an immediate anything the client retries the append you know

1253
01:00:08,300 --> 01:00:11,570
因为也许问题是网络消息丢失了，所以没有什么可以修复的
because maybe the problem was a network message got lost so there's nothing to repair right

1255
01:00:11,570 --> 01:00:15,080
您知道网络消息丢失了，应该发送
you know the network message got lost which should be transmitted a

1258
01:00:15,080 --> 01:00:17,600
这是重传网络消息的一种复杂方式
and this is sort of complicated way of retransmitting the network message

1259
01:00:17,600 --> 01:00:21,020
也许那是最常见的失败类型
maybe that's the most common kind of failure in that case just

1261
01:00:21,020 --> 01:00:22,790
我们什么都不会改变
we don't change anything

1262
01:00:22,790 --> 01:00:26,750
所以相同的主要相同的中学
so same primary same secondaries 

1263
01:00:26,750 --> 01:00:29,270
客户端这次重试也许可以，因为网络不会丢弃消息
the client retries maybe this time it'll work because the network doesn't discard a message 

1265
01:00:29,270 --> 01:00:31,490
这是一个有趣的问题
it's an interesting question

1266
01:00:31,490 --> 01:00:37,910
这里出问题的是，其中之一是严重的错误或故障
what went wrong here is that one of that there was a serious error or Fault in one of the secondaries

1269
01:00:37,910 --> 01:00:46,820
我们想要的是主服务器重新配置那组副本以删除不起作用的辅助服务器
what we would like is for the master to reconfigure that set of replicas to drop that secondary that's not working

1272
01:00:46,820 --> 01:00:49,460
然后它会
and it would then 

1273
01:00:49,460 --> 01:00:50,900
因为它在执行此代码路径时选择了新的主要对象
because it's choosing a new primary in executing this code path 

1274
01:00:50,900 --> 01:00:54,890
然后主人会增加版本
the master would then increment the version 

1276
01:00:54,890 --> 01:00:56,750
然后我们有一个新的主要版本和新的工作版本，以及一个新版本
and then we have a new primary and new working secondaries with a new version

1277
01:00:56,750 --> 01:01:04,160
还有一个不太好的辅助数据库，其中有一个旧版本和一个过时的数据副本
and this not-so-great secondary with an old version and a stale copy of the data 
 
1280
01:01:04,160 --> 01:01:09,260
但是因为它具有旧版本，所以主控器永远不会将其视为新版本
but because that has an old version the master will never never mistake it for being fresh 

1282
01:01:09,260 --> 01:01:12,470
但是没有证据表明这种情况会立即发生
but there's no evidence in the paper that that happens immediately 

1284
01:01:12,470 --> 01:01:15,110
报纸上怎么说
what's said in the paper 

1285
01:01:15,110 --> 01:01:17,180
客户只是重试，并希望以后再使用
the client just retries and hopes it works again later

1286
01:01:17,180 --> 01:01:19,610
最终大师会
eventually the master will 

1287
01:01:19,610 --> 01:01:21,230
如果次要对象死了
if the secondary is dead

1288
01:01:21,230 --> 01:01:23,990
最终师父会ping
eventually the master does ping 

1289
01:01:23,990 --> 01:01:25,850
所有的中继服务器将意识到
all the trunk servers will realize that 

1290
01:01:25,850 --> 01:01:35,590
然后可能会更改主要和次要元素的集合并增加版本，但仅在以后
and will probably then change the set of primaries and secondaries and increment the version but only only later

1293
01:01:40,380 --> 01:01:45,660
该问题的答案的租赁
the lease the leases that the answer to the question

1294
01:01:45,660 --> 01:01:52,500
如果主人认为小学小学已经死了怎么办
what if the master thinks the primary is dead 

1296
01:01:52,500 --> 01:01:53,790
因为它无法正确实现
because it can't reach it right 

1297
01:01:53,790 --> 01:01:55,470
假设我们处于一种情况
that's supposing we're in a situation where 

1298
01:01:55,470 --> 01:01:58,110
在某个时候，师父说你是主要的
at some point the master said you're the primary 

1299
01:01:58,110 --> 01:01:59,940
师父就像对它们全部执行ping操作
and the master was like pinging them all the

1300
01:01:59,940 --> 01:02:01,260
定期检查服务器是否还活着
servers periodically to see if they're alive 

1301
01:02:01,260 --> 01:02:02,610
因为如果他们死了，想选一个新的小学
because if they're dead and wants to pick a new primary 

1302
01:02:02,610 --> 01:02:05,160
主人会向您发送一些ping操作
the master sends some pings to you 

1303
01:02:05,160 --> 01:02:09,690
你是主要的，你没有正确的回应
you're the primary and you don't respond right 

1305
01:02:09,690 --> 01:02:11,850
所以你会认为在那个时候
so you would think that at that point where gosh

1306
01:02:11,850 --> 01:02:14,060
你没有回应我的ping
you're not responding to my pings 

1307
01:02:14,060 --> 01:02:20,790
那么您可能会认为那时的主人会指定一个新的主要
then you might think the master at that point would designate a new primary 

1309
01:02:20,790 --> 01:02:23,820
事实证明，这本身就是一个错误
it turns out that by itself is a mistake 

1310
01:02:23,820 --> 01:02:30,090
以及这样做的原因，为什么做那么简单是一个错误，你知道吗
and the reason for that the reason why it's a mistake to do that simple did you know

1312
01:02:30,090 --> 01:02:32,400
使用那个简单的设计就是
use that simple design is that 

1313
01:02:32,400 --> 01:02:35,400
我可能会对您进行ping操作，而我没有得到回复的原因是因为
I may be pinging you and the reason why I'm not getting responses is because then

1315
01:02:35,400 --> 01:02:38,190
我和你之间的网络有问题
there's something wrong with a network between me and you 

1317
01:02:38,190 --> 01:02:41,220
所以有可能你还活着，你是主要的，你还活着
so there's a possibility that you're alive you're the primary you're alive 

1319
01:02:41,220 --> 01:02:42,750
我正在为您锁定网络正在丢弃的数据包
I'm pining you the network is dropping that packets 

1320
01:02:42,750 --> 01:02:46,320
但您可以与其他客户交谈，并且正在处理您认识的其他客户的请求
but you can talk to other clients and you're serving requests from other clients you know 

1322
01:02:46,320 --> 01:02:51,840
如果我的主人为那个块指定了​​一个新的主
and if I if I the master sort of designated a new primary for that chunk

1324
01:02:51,840 --> 01:02:56,340
现在我们有两个主数据处理写操作，但是有两个不同的数据副本
now we'd have two primaries processing writes but two different copies of the data 

1326
01:02:56,340 --> 01:03:02,370
所以现在我们已经完全分散了数据
and so now we have totally diverging copies the data 

1328
01:03:02,370 --> 01:03:12,570
这就是所谓的具有两个原语或其他不知道彼此的处理请求的错误，称为裂脑
and that's called that error having two primaries or whatever processing requests without knowing each other it's called split brain 

1331
01:03:12,570 --> 01:03:16,710
我在船上写这个
and I'm writing this on board

1332
01:03:16,710 --> 01:03:19,440
因为这是一个重要的想法，它会再次出现
because it's an important idea and it'll come up again 

1333
01:03:19,440 --> 01:03:24,540
或通常说是由网络分区引起的
and it's caused or it's usually said to be caused by network partition 

1335
01:03:24,540 --> 01:03:35,640
这是一些网络错误，其中主服务器无法与主服务器通信，但主服务器可以与客户端通信
that is some network error in which the master can't talk to the primary but the primary can talk to clients 

1338
01:03:35,640 --> 01:03:38,330
某种程度的部分网络故障
sort of partial network failure

1339
01:03:38,330 --> 01:03:44,760
而且您知道这些是其中最难处理的问题
and you know these are some of the these are the hardest problems to deal with

1341
01:03:44,760 --> 01:03:46,470
并建立这类存储系统
and building these kind of storage systems 

1342
01:03:46,470 --> 01:03:49,170
好，那是问题所在
okay so that's the problem is 

1343
01:03:49,170 --> 01:03:56,210
我们想排除为同一块错误地指定两个主要元素的可能性
we want to rule out the possibility of mistakingly designating two primaries for the same chunk 

1346
01:03:56,210 --> 01:03:58,610
主人达到的方式是
the way the master achieves that is that 

1347
01:03:58,610 --> 01:04:05,590
当它指定一个主要对象时，它说它给主要对象提供租约，这基本上是在一定时间内拥有主要对象的权利
when it designates a primary it says it gives a primary a lease which is basically the right to be primary until a certain time

1350
01:04:05,590 --> 01:04:12,500
主人知道它记得并且知道最少的持续多长时间，
the master knows it remembers and knows how long the least lasts and 

1352
01:04:12,500 --> 01:04:14,960
主要人知道租约能持续多久
the primary knows how long is lease lasts 

1353
01:04:14,960 --> 01:04:20,570
如果租约到期，则主要服务器知道它已到期，并且将仅停止执行客户端请求
if the lease expires the primary knows that it expires and will simply stop executing client requests 

1355
01:04:20,570 --> 01:04:24,830
租约到期后它将忽略或拒绝客户请求
it'll ignore or reject client requests after the lease expired

1357
01:04:24,830 --> 01:04:27,800
因此，如果主人不能与主要人说话
and therefore if the master can't talk to the primary

1358
01:04:27,800 --> 01:04:31,220
主人想指定一个新的小学
and the master would like to designate a new primary 

1360
01:04:31,220 --> 01:04:35,270
主人必须等待租约到期才可以租用
the master must wait for the lease to expire for the previous primary 

1362
01:04:35,270 --> 01:04:40,010
因此，这意味着船长将坐下来等待60秒
so that means master is going to sit on its hands for one lease period 60 seconds 

1364
01:04:40,010 --> 01:04:44,510
之后，可以确保旧的主数据库将停止运行其主数据库
after that it's guaranteed the old primary will stop operating its primary 

1366
01:04:44,510 --> 01:04:54,460
现在，主人可以看到他是否不需要新的小学，而不会产生这种可怕的裂脑情况
and now the master can see if he doesn't need a new primary without producing this terrible split brain situation

1369
01:05:02,299 --> 01:05:15,920
哦，所以问题是为什么要指定一个新的主要不良品
oh so the question is why is designating a new primary bad 

1371
01:05:15,920 --> 01:05:18,079
因为客户总是先问主人
since the clients always ask the master first and 

1372
01:05:18,079 --> 01:05:20,059
所以主人改变主意
so the master changes its mind 

1373
01:05:20,059 --> 01:05:22,819
然后后续客户会将客户定向到新的主要客户
then subsequent clients will direct the clients to the new primary 

1374
01:05:22,819 --> 01:05:26,390
原因之一是
well one reason is that the

1375
01:05:26,390 --> 01:05:28,429
客户端缓存以提高效率
clients cache for efficiency the clients

1376
01:05:28,429 --> 01:05:31,279
缓存主要身份
cache the identity of the primary 

1377
01:05:31,279 --> 01:05:34,009
至少短时间内
for at least for short periods of time 

1378
01:05:34,009 --> 01:05:37,489
即使他们没有，尽管不好的顺序是
even if they didn't though the bad sequence is that 

1379
01:05:37,489 --> 01:05:40,640
我是主要的主人你问我主要的是谁
I'm the prime the master you ask me who the primary is 

1380
01:05:40,640 --> 01:05:46,369
我向您发送一条消息，说主要是服务器正确
I send you a message saying the primary is server one right

1382
01:05:46,369 --> 01:05:47,809
并且该消息在网络中膨胀
and that message is inflate in the network 

1383
01:05:47,809 --> 01:05:50,630
然后我是我知道的主人
and then I'm the master I you know 

1384
01:05:50,630 --> 01:05:52,160
我认为有人失败了
I think somebody's failed whatever

1385
01:05:52,160 --> 01:05:53,269
我认为小学已经填补
I think that primary is filled 

1386
01:05:53,269 --> 01:05:55,219
我指定了新的小学
I designated a new primary 

1387
01:05:55,219 --> 01:05:56,209
我发送主要信息说你是主要
and I send the primary message saying you're the primary 

1388
01:05:56,209 --> 01:06:00,349
然后我开始回答其他要求主要客户的客户
and I start answering other clients who ask the primary is 

1390
01:06:00,349 --> 01:06:01,400
说那边是主要的
saying that that over there is the primary

1391
01:06:01,400 --> 01:06:03,019
给您的讯息仍在传播中
while the message to you is still in flight 

1392
01:06:03,019 --> 01:06:04,880
您收到消息说
you receive the message saying

1393
01:06:04,880 --> 01:06:07,130
旧的小学，你认为的小学
the old primaries the primary you think

1394
01:06:07,130 --> 01:06:10,219
天哪，我刚从师父那里得到这个
gosh I just got this from the master 

1395
01:06:10,219 --> 01:06:11,630
我要去跟那个小学
I'm gonna go talk to that primary 

1396
01:06:11,630 --> 01:06:13,459
没有一些更聪明的计划
and without some much more clever scheme

1397
01:06:13,459 --> 01:06:14,859
你不可能意识到
there's no way you could realize that

1398
01:06:14,859 --> 01:06:19,309
即使您只是从师傅那里获得了这些信息
even though you just got this information from the master 

1400
01:06:19,309 --> 01:06:24,410
它已经过时，并且该主数据库是否满足您的修改请求
it's already out of date and if that primary serves your modification requests 

1402
01:06:24,410 --> 01:06:27,920
现在我们必须要对成功做出回应
now we have to and and respond success to you right

1403
01:06:27,920 --> 01:06:35,349
那么我们有两个相互冲突的副本
then we have two conflicting replicas

1404
01:06:35,890 --> 01:06:38,890
是
yes

1405
01:06:41,910 --> 01:06:50,710
再说一次，您有一个新文件，没有副本
say that again you've a new file and no replicas

1406
01:06:50,710 --> 01:06:55,180
好的，如果您有一个新文件，则没有副本，甚至现有文件也没有副本
okay so if you have a new file no replicas or even an existing file and no replicas 

1408
01:06:55,180 --> 01:07:00,130
你会走我在黑板上画的路
the you'll take the path I drew on the blackboard 

1410
01:07:00,130 --> 01:07:04,270
主人会收到客户的要求，说我想附加这个文件
the master will receive a request from a client saying oh I'd like to append this file 

1412
01:07:04,270 --> 01:07:08,200
然后，我想大师会首先看到与该文件没有任何关联的块
and then well I guess the master will first see there's no chunks associated with that file 

1414
01:07:08,200 --> 01:07:15,730
它将组成一个新的块标识符，或者可能通过调用随机数生成器
and it will just make up a new chunk identifier or perhaps by calling the random number generator 

1417
01:07:15,730 --> 01:07:17,920
然后在其信息块信息表中查看
and then it'll look in its chunk information table and see

1418
01:07:17,920 --> 01:07:22,030
天哪，我没有关于那块的任何信息
gosh I don't have any information about that chunk 

1420
01:07:22,030 --> 01:07:24,730
它会组成一个新记录，但必须
and it'll make up a new record saying but it must

1421
01:07:24,730 --> 01:07:26,410
说得很好的特殊情况代码
be special case code where it says well

1422
01:07:26,410 --> 01:07:28,720
我不知道任何版本号
I don't know any version number this

1423
01:07:28,720 --> 01:07:30,850
块不存在，我只是要
chunk doesn't exist I'm just gonna make

1424
01:07:30,850 --> 01:07:32,740
上一个新版本
up a new version number one 

1425
01:07:32,740 --> 01:07:35,380
选择一个随机的小学和中学
pick a random primary and set of secondaries

1426
01:07:35,380 --> 01:07:40,660
并告诉他们您对此新的空块负责，请开始工作
and tell them look you are responsible for this new empty chunk please get to work

1428
01:07:40,660 --> 01:07:52,
该文件说默认情况下每个块有三个副本，因此通常是一个主副本和两个备份副本
the paper says three replicas per chunk by default so typically a primary and two backups

1431
01:08:03,930 --> 01:08:13,270
好吧好吧，也许最
okay okay so the maybe the most

1432
01:08:13,270 --> 01:08:19,890
重要的是要重复我们几分钟前的讨论
important thing here is just to repeat the discussion we had a few minutes ago

1434
01:08:21,540 --> 01:08:32,140
GFS的有意构建
the intentional construction of GFS 

1435
01:08:32,140 --> 01:08:33,790
我们有这些记录附件是
we had these record appends is that 

1436
01:08:33,790 --> 01:08:41,009
如果我们有三个，我们有三个副本
if we have three we have three replicas 

1437
01:08:41,009 --> 01:08:43,779
您知道客户可能会发送来
you know maybe a client sends in and a

1438
01:08:43,779 --> 01:08:46,719
记录a和所有三个记录的追加
record appends for record a and all three

1439
01:08:46,719 --> 01:08:49,569
副本或主要副本
replicas or the primary and both of the

1440
01:08:49,569 --> 01:08:52,120
次要对象成功附加了数据
secondaries successfully append the data

1441
01:08:52,120 --> 01:08:54,069
块，也许是第一个记录
the chunks and maybe the first record in

1442
01:08:54,069 --> 01:08:55,689
在这种情况下，后备箱可能是
the trunk might be a in that case 

1443
01:08:55,689 --> 01:08:57,930
他们都同意，因为他们都做到了
and they all agree because they all did it

1444
01:08:57,930 --> 01:09:00,040
假设另一个客户进来说
supposing another client comes in says

1445
01:09:00,040 --> 01:09:03,339
看我要追加记录B
look I want append record B 

1446
01:09:03,339 --> 01:09:06,250
但邮件丢失到副本之一
but the message is lost to one of the replicas

1447
01:09:06,250 --> 01:09:08,410
网络，无论如何
the network whatever supposably the

1448
01:09:08,410 --> 01:09:11,589
消息错误，但另外两个
message by mistake but the other two

1449
01:09:11,589 --> 01:09:13,390
副本获取消息，其中之一
replicas get the message and one of

1450
01:09:13,390 --> 01:09:14,380
他们是主要的，我的另一个
them's a primary and my other

1451
01:09:14,380 --> 01:09:16,000
二级都将文件追加
secondaries they both append the file

1452
01:09:16,000 --> 01:09:19,390
所以现在我们有两个副本
so now what we have is two the replicas

1453
01:09:19,390 --> 01:09:21,759
B和另一个没有任何东西
that B and the other one doesn't have anything 

1454
01:09:21,759 --> 01:09:29,109
然后可能是第三个客户想要附加C，也许
and then may be a third client wants to append C and maybe the 

1456
01:09:29,109 --> 01:09:30,460
记住这是主要的
remember that this is the primary the primary

1457
01:09:30,460 --> 01:09:32,738
选择自主要
picks the offset since the primary just

1458
01:09:32,738 --> 01:09:35,109
要告诉中学
gonna tell the secondaries look in a

1459
01:09:35,109 --> 01:09:38,620
此时正确记录C
right record C at this point 

1460
01:09:38,620 --> 01:09:43,450
他们都在这里写C
in the chunk they all write C here 

1461
01:09:43,450 --> 01:09:45,040
现在B的客户
now the client for B the rule for a client for

1462
01:09:45,040 --> 01:09:47,830
B对于让我们出错的客户
B that for the client that gets us error

1463
01:09:47,830 --> 01:09:50,439
从它的要求回来的是
back from its request is that 

1464
01:09:50,439 --> 01:09:53,770
它会重新发送请求，所以现在客户端
it will resend the request so now the client

1465
01:09:53,770 --> 01:09:56,020
要求追加记录B的询问
that asked to append record B will ask

1466
01:09:56,020 --> 01:09:57,640
再次追加记录B
again to append record B 

1467
01:09:57,640 --> 01:10:00,340
这次也许没有网络损失，
and this time maybe there's no network losses and 

1468
01:10:00,340 --> 01:10:05,040
所有三个副本作为面板记录B
all three replicas as a panel record B

1469
01:10:05,040 --> 01:10:07,239
对，他们都在那里生活
right and they're all lives there they all

1470
01:10:07,239 --> 01:10:09,870
现在拥有最新的版本号
have the most fresh version number and now 

1471
01:10:09,870 --> 01:10:13,150
如果客户阅读
if a client reads

1472
01:10:13,150 --> 01:10:16,830
他们所看到的取决于轨道
what they see depends on the track which

1473
01:10:17,820 --> 01:10:20,020
他们看的副本
replicas they look at 

1474
01:10:20,020 --> 01:10:22,929
它将总共看到所有三个记录
it's gonna see in total all three of the records 

1475
01:10:22,929 --> 01:10:25,030
但它会以不同的顺序显示，具体取决于
but it'll see in different orders depending on

1476
01:10:25,030 --> 01:10:31,870
哪个副本读取了一个B C，然后读取了一个B的重复，所以如果它
which replica reads a B C and then a repeat of B so if it

1478
01:10:31,870 --> 01:10:33,730
这意味着我将看到读取此副本，然后看到B，然后
it'll mean I'll see reads this replica it'll see B and then

1479
01:10:33,730 --> 01:10:36,969
C，如果它读取此副本
C if it reads this replica 

1480
01:10:36,969 --> 01:10:39,340
它会看到A，然后在文件填充中留一个空白
it'll see A and then a blank space in the file padding 

1481
01:10:39,340 --> 01:10:41,920
然后是C然后是B，所以如果您
and then C and then B so if you

1482
01:10:41,920 --> 01:10:44,199
在这里阅读，如果阅读，您会看到C，然后是B
read here you see C then B if you read

1483
01:10:44,199 --> 01:10:47,320
在这里你看到B然后C如此不同
here you see B and then C so different

1484
01:10:47,320 --> 01:10:49,350
读者会看到不同的结果，
readers will see different results and

1485
01:10:49,350 --> 01:10:52,330
也许最糟糕的情况是
maybe the worst situation is it 

1486
01:10:52,330 --> 01:10:54,489
一些客户端从主服务器返回错误
some client gets an error back from the primary 

1487
01:10:54,489 --> 01:10:58,360
因为其中一位中学
because one of the secondaries

1488
01:10:58,360 --> 01:11:00,159
未能执行追加
failed to do the append 

1489
01:11:00,159 --> 01:11:02,260
然后客户端在我们发送请求之前死亡
and then the client dies before we sending the request 

1490
01:11:02,260 --> 01:11:04,030
所以你可能会得到一个
so then you might get a

1491
01:11:04,030 --> 01:11:07,030
您有记录D的情况
situation where you have record D

1492
01:11:07,030 --> 01:11:16,420
出现在某些副本中，而完全不出现在其他副本中的任何地方
showing up in some of the replicas and completely not showing up anywhere in the other replicas 

1495
01:11:16,420 --> 01:11:19,659
所以你知道在这个方案下我们有很好的性能
so you know under this scheme we have good properties for

1496
01:11:19,659 --> 01:11:23,620
对于主要发送回一个
for appends that the primary sent back a

1497
01:11:23,620 --> 01:11:26,800
和的成功答案
successful answer for and 

1498
01:11:26,800 --> 01:11:32,949
对于主要返回失败的附加的附件，属性不是那么好
sort of not so great properties for appends where the primary sent back of failure 

1500
01:11:32,949 --> 01:11:37,540
并且记录的副本完全不同，所有不同的副本集
and the records the replicas just absolutely be different all different sets of replicas

1502
01:11:37,540 --> 01:11:40,440
yes

1503
01:11:44,400 --> 01:11:49,090
我在论文中读到的是，客户从流程的开始就开始
my reading in the paper is that the client starts at the very beginning of the process 

1505
01:11:49,090 --> 01:11:54,190
并再次询问主文件您知道该文件中的最后一块是什么
and asked the master again what's the last chunk in this file you know 

1507
01:11:54,190 --> 01:12:02,820
因为如果其他人在文件中挂起，则可能已更改
because it might be might have changed if other people are pending in the file yes

1510
01:12:17,760 --> 01:12:20,290
所以我不知道我看不懂设计师的思想
so I can't you know I can't read the designers mind 

1511
01:12:20,290 --> 01:12:27,640
因此观察到该系统可以设计为使副本保持精确同步
so the observation is the system could have been designed to keep the replicas in precise sync 

1514
01:12:27,640 --> 01:12:30,820
这是绝对正确的，您将在实验2和3中进行
it's absolutely true and you will do it in labs 2 & 3 

1515
01:12:30,820 --> 01:12:36,880
所以你们将要设计一个进行复制的系统，该系统实际上使副本保持同步
so you guys are going to design a system that does replication that actually keeps the replicas in sync

1518
01:12:36,880 --> 01:12:43,180
并且您将了解到，您需要采取多种技巧才能做到这一点
and you'll learn you know there's some various techniques various things you have to do in order to do that

1521
01:12:43,180 --> 01:12:47,740
其中之一是，如果您希望副本保持同步，则只需要遵循此规则
and one of them is that there just has to be this rule if you want the replicas to stay in sync 

1523
01:12:47,740 --> 01:12:54,490
必须遵循的规则是您不能将这些部分操作仅应用于某些操作，而不能应用于其他操作
it has to be this rule that you can't have these partial operations that are applied to only some and not others 

1526
01:12:54,490 --> 01:12:58,630
这意味着必须有某种机制来喜欢系统
and that means that there has to be some mechanism to like where the system 

1528
01:12:58,630 --> 01:13:01,900
即使客户死于系统说我们不用等一会儿
even if the client dies where the system says we don't wait a minute 

1530
01:13:01,900 --> 01:13:04,060
有这个操作我还没有完成
there was this operation I haven't finished it yet 

1531
01:13:04,060 --> 01:13:15,360
因此，您构建的系统中，主数据库实际上要确保备份获得每条消息
so you build systems in which the primary actually make sure the backups get every message

1534
01:13:29,460 --> 01:13:37,739
如果第一次写B失败，您认为C应该和B一起使用
if the first write of B failed you think the C should go with the B

1536
01:13:37,770 --> 01:13:40,450
好吧，你可能不认为应该
well it doesn't you may think it should

1537
01:13:40,450 --> 01:13:42,130
但是系统实际运行的方式是
but the way the system actually operates is that 

1538
01:13:42,130 --> 01:13:46,690
主节点将C添加到块的末尾
the primary will add C to the end of the chunk 

1539
01:13:46,690 --> 01:13:57,730
然后B
and the after B 

1540
01:13:57,730 --> 01:13:59,890
是的，我的意思是，原因之一是
yeah I mean one reason for this is that 

1541
01:13:59,890 --> 01:14:03,010
在写C的时候，实际上可能不知道B的命运是什么。
at the time the write for C comes in the primary may not actually know what the fate of B was

1543
01:14:03,010 --> 01:14:07,510
因为我们遇到了多个同时提交附件的客户
because we met multiple clients submitting appends concurrently

1545
01:14:07,510 --> 01:14:14,890
而且您知道为了获得高性能，您希望主服务器首先启动B的附加操作
and you know for high performance you want the primary to start the append for B first 

1547
01:14:14,890 --> 01:14:21,750
然后我一获得下一个停靠点，就告诉所有人您看到了，以便所有这些事情并行发生
and then as soon as I can got the next stop set tell everybody did you see so that all this stuff happens in parallel 

1550
01:14:21,750 --> 01:14:25,270
你知道通过减慢速度可以
you know by slowing it down you could 

1551
01:14:25,270 --> 01:14:33,760
你知道主要的可以决定B完全失败了
you know the primary could sort of decide that B it totally failed 

1553
01:14:33,760 --> 01:14:39,970
然后发送另一轮消息，请撤消B的写操作
and then send another round of messages saying please undo the write of B 

1555
01:14:39,970 --> 01:14:43,360
而且我会更复杂，更慢
and there'll be more complex and slower I'm you know

1556
01:14:43,360 --> 01:14:48,730
同样，这样做的理由是您知道设计非常简单
again the the justification for this is that the design is pretty simple it you know 

1558
01:14:48,730 --> 01:14:53,820
它揭示了应用程序的一些奇怪之处
it reveals some odd things to applications 

1559
01:14:53,820 --> 01:14:58,060
希望是
and the hope was that

1560
01:14:58,060 --> 01:15:04,960
可以相对容易地编写应用程序以容忍记录的顺序不同或谁知道
applications could be relatively easily written to tolerate records being in different orders or who knows what 

1563
01:15:04,960 --> 01:15:08,800
或者如果他们不能，应用程序可以
or if they couldn't that applications could

1564
01:15:08,800 --> 01:15:13,300
要么自己安排接订单
either make their own arrangements for picking an order themselves 

1566
01:15:13,300 --> 01:15:14,860
并在文件或其他内容中写入您知道的序列号
and writing you know sequence numbers in the files or something 

1567
01:15:14,860 --> 01:15:17,739
否则你可能只有一个
or you could just have a 

1568
01:15:17,739 --> 01:15:20,140
如果应用程序真的对订单非常敏感
if application really was very sensitive to order 

1569
01:15:20,140 --> 01:15:24,220
您可能没有从不同客户端到同一文件的并发依赖
you could just not have concurrent depends from different clients to the same file 

1571
01:15:24,220 --> 01:15:27,520
对，你可能就知道
right you could just you know

1572
01:15:27,520 --> 01:15:29,410
关闭订单非常多的文件
close files where order is very

1573
01:15:29,410 --> 01:15:31,390
很重要，例如说这是电影文件
important like say it's a movie file you

1574
01:15:31,390 --> 01:15:32,750
知道你不想争夺
know you don't want to scramble

1575
01:15:32,750 --> 01:15:35,840
电影文件中的字节数，您只需写入电影文件
bytes in a movie file you just write the Movie file 

1576
01:15:35,840 --> 01:15:45,040
您是由一个客户端按顺序将电影写入文件的，而不是同时记录追加
you write the movie to the file by one client in sequential order and not with concurrent record appends

1579
01:15:49,150 --> 01:15:56,680
好吧好吧
okay all right

1580
01:15:56,680 --> 01:16:06,770
有人基本问到将这种设计变成一个
the somebody asked basically what would it take to turn this design into one

1582
01:16:06,770 --> 01:16:08,120
实际上提供了强大的一致性
which actually provided strong consistency

1583
01:16:08,120 --> 01:16:18,680
一致性更接近我们的单服务器模型，没有任何惊喜
consistency closer to our sort of single server model where there's no surprises 

1586
01:16:18,680 --> 01:16:22,340
我实际上不知道，因为您知道这需要全新的复杂设计
I don't actually know because you know that requires an entire new complex design 

1588
01:16:22,340 --> 01:16:24,560
目前尚不清楚如何将GFS突变为该设计
it's not clear how to mutate GFS to be that design 

1589
01:16:24,560 --> 01:16:27,440
但我可以为您列出一些您想考虑的事情
but I can list for you lists for you some things that you would want to think about 

1591
01:16:27,440 --> 01:16:34,460
如果您想将GFS升级到系统确实具有很强的一致性
if you wanted to upgrade GFS to a a system did have strong consistency

1593
01:16:34,460 --> 01:16:40,940
一个是您可能需要主要对象来检测重复的请求
one is that you probably need the primary to detect duplicate requests 

1595
01:16:40,940 --> 01:16:44,960
这样当第二个B进入初级时，
so that when this second B comes in the primary is aware that 

1597
01:16:44,960 --> 01:16:47,030
哦，实际上您知道我们早已看到了该请求
oh actually you know we already saw that request earlier

1598
01:16:47,030 --> 01:16:50,570
并做了或没有做，并尝试
and did it or didn't do it and to try to

1599
01:16:50,570 --> 01:16:52,160
确保B在文件中不出现两次
make sure that B doesn't show up twice in the file 

1600
01:16:52,160 --> 01:16:54,140
所以一个是你将需要重复检测
so one is you're gonna need duplicate detection 

1601
01:16:54,140 --> 01:16:59,570
你可能还有另一个问题
another issues you probably 

1602
01:16:59,570 --> 01:17:02,660
如果次要代表次要
if a secondary is acting a secondary 

1603
01:17:02,660 --> 01:17:05,000
您真的需要设计系统
you really need to design the system 

1604
01:17:05,000 --> 01:17:08,180
这样，如果主要对象告诉辅助对象做某事
so that if the primary tells a secondary to do something

1606
01:17:08,180 --> 01:17:12,560
辅助实际上做到了，而不仅仅是返回错误
the secondary actually does it and doesn't just return error right 

1608
01:17:12,560 --> 01:17:16,880
对于具有次要能力的严格一致的系统而言，
for a strictly consistent system having the secondaries be able to just sort of blow

1610
01:17:16,880 --> 01:17:24,170
取消主要要求而实际上没有任何补偿是不好的
off primary requests with really no compensation is not okay 

1612
01:17:24,170 --> 01:17:25,730
所以我认为中学必须接受并执行请求
so I think the secondaries have to accept requests and execute them 

1613
01:17:25,730 --> 01:17:32,180
或者如果次要磁盘有某种永久性损坏，例如错误地拔出了磁盘，这
or if a secondary has some sort of permanent damage like it's disk got unplugged by mistake this 

1616
01:17:32,180 --> 01:17:36,200
您需要一种机制将辅助服务器从系统中取出
you need to have a mechanism to like take the secondary out of the system 

1618
01:17:36,200 --> 01:17:39,140
这样小学可以继续其余的中学
so the primary can proceed with the remaining secondaries 

1619
01:17:39,140 --> 01:17:44,950
但GFS至少不会立即消失
but GFS kind of doesn't either at least not right away

1621
01:17:45,200 --> 01:17:49,350
所以这也意味着
and so that also means that 

1622
01:17:49,350 --> 01:17:50,910
当小学的要求中学的东西
when the primary asks secondary's to append something 

1623
01:17:50,910 --> 01:17:54,810
次要人员必须小心，不要将数据暴露给读者
the secondaries have to be careful not to expose that data to readers 

1625
01:17:54,810 --> 01:18:02,610
直到主要对象确信所有辅助对象都能够执行附加操作
until the primary is sure that all the secondaries really will be able to execute the append 

1628
01:18:02,610 --> 01:18:05,400
因此，您可能需要在
so you might need sort of multiple phases in the writes of

1629
01:18:05,400 --> 01:18:06,900
第一阶段，小学主要要求中学
first phase in which the primary asks the secondaries 

1630
01:18:06,900 --> 01:18:13,560
看起来您知道我真的很喜欢您执行此操作，您可以执行此操作，但实际上尚未执行此操作
look you know I really like you to do this operation can you do it but don't don't actually do it yet

1633
01:18:13,560 --> 01:18:17,670
如果所有次要人员都答应能够进行手术
and if all the secondaries answer with a promise to be able to do the operation

1635
01:18:17,670 --> 01:18:22,080
然后只有主要的人说好了，每个人都继续进行您所承诺的操作
only then the primary says alright everybody go ahead and do that operation you promised 

1637
01:18:22,080 --> 01:18:24,570
和你认识的人
and people you know that's

1638
01:18:24,570 --> 01:18:27,210
许多现实世界系统的方式
the way a lot of real world systems

1639
01:18:27,210 --> 01:18:32,540
强大且一致的系统正常工作，而这种技巧称为两阶段提交
strong consistent systems work and that trick it's called two-phase commit

1641
01:18:32,630 --> 01:18:34,590
另一个问题是，如果主要崩溃
another issue is that if the primary crashes 

1642
01:18:34,590 --> 01:18:44,340
小学部开始向中学部发起的最后一组操作
there will have been some last set of operations that the primary had launched started to the secondaries 

1645
01:18:44,340 --> 01:18:51,660
主节点在确定之前就崩溃了，但是所有辅助节点是否都到达那里复制了该操作
the primary crashed before it was sure but whether those all the secondaries got there copied the operation or not 

1648
01:18:51,660 --> 01:18:54,510
所以如果主要的崩溃
so if the primary crashes 

1649
01:18:54,510 --> 01:18:57,780
你知道一个新的小学，其中一个中学将接任
you know a new primary one of the secondaries is going to take over as primary 

1651
01:18:57,780 --> 01:19:05,580
但是在那一点上，新的主数据库和其余的辅助数据库在最近的几次操作中可能会有所不同
but at that point the second the new primary and the remaining secondaries may differ in the last few operations 

1654
01:19:05,580 --> 01:19:09,030
因为也许其中一些在主服务器崩溃之前没有收到消息
because maybe some of them didn't get the message before the primary crashed

1656
01:19:09,030 --> 01:19:15,300
因此，新的引物必须从与次要对象显式重新同步开始，以
and so the new primer has to start by explicitly resynchronizing with the secondaries to

1658
01:19:15,300 --> 01:19:20,750
确保他们的经营历史的尾巴都一样
make sure that the sort of the tail of their operation histories are the same

1660
01:19:21,080 --> 01:19:24,060
终于解决了这个问题
finally to deal with this problem of 

1661
01:19:24,060 --> 01:19:25,530
哦，你知道有时候中学的时候会有所不同
oh you know there may be times when the secondaries differ 

1662
01:19:25,530 --> 01:19:33,000
或客户可能会从主人那里得到一个过时的指示
or the client may have a slightly stale indication from the master of which secondary to talk to

1665
01:19:33,000 --> 01:19:38,010
系统要么需要通过主服务器发送所有客户端读取
the system either needs to send all client reads through the primary 

1667
01:19:38,010 --> 01:19:43,860
因为只有主节点才可能知道实际发生了哪些操作
because only the primary is likely to know which operations have really happened

1669
01:19:43,860 --> 01:19:47,400
或者我们需要像次要租房那样的次要租借系统
or we need a lease system for the secondaries just like we have for the primary 

1671
01:19:47,400 --> 01:19:55,030
因此，众所周知，当次要律师可以或不能合法回应客户时
so that it's well understood that when secondary can or can't legally respond to a client 

1673
01:19:55,030 --> 01:19:58,570
这些就是我所知道的，必须在此系统中修复
and so these are the things I'm aware of that would have to be fixed in this system 

1675
01:19:58,570 --> 01:20:02,230
增加了复杂性和技巧，使其具有很强的一致性
to added complexity and chitchat to make it have strong consistency 

1677
01:20:02,230 --> 01:20:05,050
而你实际上就是
and you're actually the way

1678
01:20:05,050 --> 01:20:08,020
我得到这份名单是通过考虑实验室
I got that list was by thinking about the labs 

1679
01:20:08,020 --> 01:20:12,099
你最终会做我刚才所说的所有事情
you're gonna end up doing all the things I just talked about as part

1681
01:20:12,099 --> 01:20:18,940
两个实验室和三个实验室以建立严格一致的系统
of labs two and three to build a strictly consistent system 

1683
01:20:18,940 --> 01:20:21,099
好吧，让我花一分钟的时间
okay so let me spend one minute on there's actually

1684
01:20:21,099 --> 01:20:25,840
我在笔记中链接到某种回顾性访谈，内容涉及效果如何
I have a link in the notes to a sort of retrospective interview about how well

1686
01:20:25,840 --> 01:20:32,770
GFS在Google生涯的前五年或十年中表现出色
GFS played out over the first five or ten years of his life at Google 

1688
01:20:32,770 --> 01:20:40,570
因此，高层次的总结是，最重要的是取得了巨大的成功，许多Google应用程序都使用了它
so the high-level summary is that the most is that was tremendously successful and many many Google applications used it 

1691
01:20:40,570 --> 01:20:45,250
后来，许多Google基础架构都像大文件一样被构建，例如BigTable
and a number of Google infrastructure was built as a late like big file for example BigTable 

1693
01:20:45,250 --> 01:20:50,190
我的意思是被构建为GFS和MapReduce之上的一层
I mean was built as a layer on top of GFS and MapReduce also

1695
01:20:50,190 --> 01:20:54,550
在Google中被广泛使用
so widely used within Google 

1696
01:20:54,550 --> 01:20:57,460
可能最严重的限制是
may be the most serious limitation is that there

1697
01:20:57,460 --> 01:20:59,289
是一个单一的主人，而主人
was a single master and the master had

1698
01:20:59,289 --> 01:21:01,510
每个块中的每个文件都有一个表条目
to have a table entry for every file in every chunk 

1699
01:21:01,510 --> 01:21:06,820
这意味着GFS的使用量是否增加了，并且它们涉及的文件越来越多
and that mean does the GFS use grew and they're about more and more files 

1701
01:21:06,820 --> 01:21:11,980
主机刚用完内存，用完了RAM来存储文件，并且
the master just ran out of memory ran out of RAM to store the files and

1703
01:21:11,980 --> 01:21:18,309
您知道可以增加更多的RAM，但是一台计算机可以拥有多少RAM是有限度的，因此
you know you can put more RAM on but there's limits to how much RAM a single machine can have and so 

1706
01:21:18,309 --> 01:21:19,599
这是人们遇到的最直接的问题
that was the most of the most immediate problem people ran into

1707
01:21:19,599 --> 01:21:28,030
此外，来自成千上万个客户端的单个主服务器上的负载开始过大
in addition the load on a single master from thousands of clients started to be too much 

1710
01:21:28,030 --> 01:21:30,940
在主服务器中，只有cpu每秒只能处理数百个请求
in the master only the cpu can only process however many hundreds of requests per second

1712
01:21:30,940 --> 01:21:39,880
尤其是将内容写到磁盘上，很快就会有太多的客户端
especially the write things to disk and pretty soon there got to be too many clients 

1715
01:21:39,880 --> 01:21:44,260
一些应用程序的另一个问题发现很难处理这种
another problem with a some applications found it hard to deal with this kind of 

1717
01:21:44,260 --> 01:21:47,500
有点奇怪的语义，最后一个问题是
sort of odd semantics and a final problem is that

1718
01:21:47,500 --> 01:21:52,059
不是自动故障转移主机的主机
the master that was not an automatic story for master failover

1720
01:21:52,059 --> 01:21:54,400
在我们阅读GFS论文的原文时
in the original in the GFS paper as we read it 

1721
01:21:54,400 --> 01:22:00,460
像需要人工干预来处理已永久崩溃且需要更换的主机
like required human intervention to deal with a master that had sort of permanently crashed and needs to be replaced 

1724
01:22:00,460 --> 01:22:09,360
可能要花几十分钟甚至更长的时间，对于某些应用程序的故障恢复，我时间太长
and that could take tens of minutes or more I was just too long for failure recovery for some applications

1727
01:22:09,360 --> 01:22:13,630
好极了，我星期四见
okay excellent I'll see you on Thursday

1728
01:22:13,630 --> 00:00:00,000
在整个学期中，我们将听到更多关于所有这些主题的信息
and we'll hear more about all these themes over the semester


